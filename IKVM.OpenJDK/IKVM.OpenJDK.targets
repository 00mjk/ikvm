<Project>

    <PropertyGroup>
        <JavaSourceTemplateOutputPath>$(IntermediateOutputPath)src\</JavaSourceTemplateOutputPath>
        <JavaResourceTemplateOutputPath>$(IntermediateOutputPath)res\</JavaResourceTemplateOutputPath>
        <RefStubsOutputPath>$(IntermediateOutputPath)refstubs\</RefStubsOutputPath>
        <RmiStubsOutputPath>$(IntermediateOutputPath)rmistubs\</RmiStubsOutputPath>
        <ResourcesZipTempPath>$(IntermediateOutputPath)resources_zip\</ResourcesZipTempPath>
        <ResourcesZipPath>$(IntermediateOutputPath)resources.zip</ResourcesZipPath>
        <JavaClassOutputPath>$(IntermediateOutputPath)classes\</JavaClassOutputPath>
        <OpenJdkAssemblyPath>$(IntermediateOutputPath)openjdk.dll</OpenJdkAssemblyPath>
        <OpenJdkDebugSymbolsPath>$(IntermediateOutputPath)openjdk.pdb</OpenJdkDebugSymbolsPath>
    </PropertyGroup>

    <ItemGroup>
        <UpToDateCheckInput Include="@(JavaSource)" />
        <UpToDateCheckInput Include="@(JavaSourceTemplate)" />
        <UpToDateCheckInput Include="@(JavaResource)" />
        <UpToDateCheckInput Include="@(JavaResourceTemplate)" />
        <UpToDateCheckInput Include="@(OpenJdkSource)" />
        <UpToDateCheckInput Include="@(OpenJdkResource)" />
        <UpToDateCheckInput Include="@(ResourcesZipItem)" />
        <UpToDateCheckInput Include="@(IkvmMapFile)" />
    </ItemGroup>

    <UsingTask TaskName="TransformTemplates" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
        <ParameterGroup>
            <Items ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
            <Variables ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
        </ParameterGroup>
        <Task>
            <Using Namespace="System" />
            <Using Namespace="System.Collections.Generic" />
            <Using Namespace="System.Text.RegularExpressions" />
            <Code Type="Fragment" Language="cs">
                <![CDATA[
                foreach (var item in Items)
                {
                    var fullPath = item.GetMetadata("FullPath");
                    if (File.Exists(fullPath) == false)
                        throw new FileNotFoundException(fullPath);
                    
                    var destPath = item.GetMetadata("TargetPath");
                    Directory.CreateDirectory(Path.GetDirectoryName(destPath));
                    
                    var fileText = File.ReadAllText(fullPath);
                    foreach (var variable in Variables)
                    {
                        var n = variable.ItemSpec;
                        var v = variable.GetMetadata("Value");
                        fileText = fileText.Replace("@@" + n + "@@", v);
                    }
                    
                    File.WriteAllText(destPath, fileText);
                }
            ]]>
            </Code>
        </Task>
    </UsingTask>

    <UsingTask TaskName="DistinctSourceItems" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
        <ParameterGroup>
            <Source ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
            <Output ParameterType="Microsoft.Build.Framework.ITaskItem[]" Output="true" />
        </ParameterGroup>
        <Task>
            <Using Namespace="System" />
            <Using Namespace="System.Collections.Generic" />
            <Code Type="Fragment" Language="cs">
                <![CDATA[
                var ls = new List<ITaskItem>();
                var hs = new HashSet<string>();
                foreach (var i in Source)
                {
                    var key = i.GetMetadata("UniqueKey");
                    if (string.IsNullOrEmpty(key) || hs.Add(key))
                        ls.Add(i);
                }
                
                Output = ls.ToArray();
            ]]>
            </Code>
        </Task>
    </UsingTask>

    <UsingTask TaskName="GetMetadataTask" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
        <ParameterGroup>
            <Items ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
            <MetadataString Output="true" />
        </ParameterGroup>
        <Task>
            <Using Namespace="System" />
            <Code Type="Fragment" Language="cs">
                <![CDATA[
                var command = new StringBuilder();
                
                foreach (var item in Items)
                {
                    command.AppendFormat("ItemName={0}\r\n", item);
                    foreach (string parameter in item.MetadataNames)
                        command.AppendFormat("  {0}={1}\r\n", parameter, item.GetMetadata(parameter));
                        
                    command.AppendFormat("\r\n");
                }
                
                MetadataString = command.ToString();
      ]]>
            </Code>
        </Task>
    </UsingTask>

    <Target Name="_BuildResourcesZip" Inputs="@(ResourcesZipItem)" Outputs="$(ResourcesZipPath)">
        <Delete Files="$(ResourcesZipTempPath)\**\*" />
        <RemoveDir Directories="$(ResourcesZipTempPath)" />
        <MakeDir Directories="$(ResourcesZipTempPath)" />
        <Copy SourceFiles="@(ResourcesZipItem)" DestinationFolder="$(ResourcesZipTempPath)\%(RecursiveDir)" />
        <Delete Files="$(ResourcesZipPath)" />
        <ZipDirectory SourceDirectory="$(ResourcesZipTempPath)" DestinationFile="$(ResourcesZipPath)" />
        <RemoveDir Directories="$(ResourcesZipTempPath)" />
        <ItemGroup>
            <FileWrites Include="$(ResourcesZipPath)" />
        </ItemGroup>
    </Target>

    <Target Name="BuildResourcesZip" DependsOnTargets="_BuildResourcesZip">
        <ItemGroup>
            <EmbeddedResource Include="$(ResourcesZipPath)">
                <LogicalName>resources.zip</LogicalName>
            </EmbeddedResource>
        </ItemGroup>
    </Target>

    <Target Name="CleanResourcesZip">
        <Delete Files="$(ResourcesZipTempPath)\**\*" />
        <RemoveDir Directories="$(ResourcesZipTempPath)" />
        <Delete Files="$(ResourcesZipPath)" />
    </Target>

    <PropertyGroup>
        <CleanDependsOn>
            $(CleanDependsOn);
            CleanResourcesZip;
        </CleanDependsOn>
    </PropertyGroup>

    <Target Name="GetIkvmStubExe" DependsOnTargets="ResolveProjectReferences">
        <MSBuild Projects="@(_MSBuildProjectReferenceExistent)" Targets="Build" BuildInParallel="$(BuildInParallel)" Properties="%(_MSBuildProjectReferenceExistent.SetConfiguration);%(_MSBuildProjectReferenceExistent.SetPlatform);%(_MSBuildProjectReferenceExistent.SetTargetFramework)" RemoveProperties="%(_MSBuildProjectReferenceExistent.GlobalPropertiesToRemove)$(_GlobalPropertiesToRemoveFromProjectReferences)" Condition=" '%(_MSBuildProjectReferenceExistent.IsIkvmStub)' == 'true' ">
            <Output TaskParameter="TargetOutputs" ItemName="_IkvmStub" />
        </MSBuild>
        <PropertyGroup>
            <IkvmStub>@(_IkvmStub)</IkvmStub>
        </PropertyGroup>
        <Message Text="Using ikvmstub executable at '$(IkvmStub)'." Importance="high" />
    </Target>

    <Target Name="ResolveIkvmRuntimeAssembly" DependsOnTargets="ResolveProjectReferences">
        <MSBuild Projects="@(_MSBuildProjectReferenceExistent)" Targets="Build" BuildInParallel="$(BuildInParallel)" Properties="%(_MSBuildProjectReferenceExistent.SetConfiguration);%(_MSBuildProjectReferenceExistent.SetPlatform);%(_MSBuildProjectReferenceExistent.SetTargetFramework)" RemoveProperties="%(_MSBuildProjectReferenceExistent.GlobalPropertiesToRemove)$(_GlobalPropertiesToRemoveFromProjectReferences)" Condition=" '%(_MSBuildProjectReferenceExistent.IsIkvmRuntimeDll)' == 'true' ">
            <Output TaskParameter="TargetOutputs" ItemName="StubAssembly" />
        </MSBuild>
    </Target>

    <Target Name="ResolveRefStubs" DependsOnTargets="ResolveIkvmRuntimeAssembly;ResolveReferences;FindReferenceAssembliesForReferences">
        <RemoveDuplicates Inputs="@(ReferencePathWithRefAssemblies)">
            <Output TaskParameter="Filtered" ItemName="RefStubReferencePath" />
        </RemoveDuplicates>

        <!-- find reference values that exist in RefStubAssembly item group -->
        <PropertyGroup>
            <RefStubAssemblyNames>@(RefStubAssembly->';%(Identity);')</RefStubAssemblyNames>
        </PropertyGroup>
        <ItemGroup>
            <_RefStubAssemblyPath Include="@(RefStubReferencePath)" Condition="$(RefStubAssemblyNames.Contains(';%(Filename);'))" />
        </ItemGroup>

        <PropertyGroup>
            <_RefStubArgs>@(RefStubReferencePath->'-r:"%(Identity)"', ' ')</_RefStubArgs>
        </PropertyGroup>
        <ItemGroup>
            <_RefStubAssembly Include="@(_RefStubAssemblyPath)">
                <JarPath>$(RefStubsOutputPath)%(Filename).jar</JarPath>
                <Args>$(_RefStubArgs)</Args>
            </_RefStubAssembly>
        </ItemGroup>
        <ItemGroup>
            <RefStub Include="@(_RefStubAssembly->'%(JarPath)')" />
        </ItemGroup>
    </Target>

    <Target Name="_BuildRefStubs" DependsOnTargets="GetIkvmStubExe;ResolveRefStubs" Inputs="@(_RefStubAssembly)" Outputs="%(JarPath)">
        <ItemGroup>
            <_RefStubAssemblyWithTempPath Include="@(_RefStubAssembly)">
                <TmpPath>$(RefStubsOutputPath)tmp\$([System.IO.Path]::GetRandomFileName())</TmpPath>
            </_RefStubAssemblyWithTempPath>
        </ItemGroup>

        <MakeDir Directories="$(RefStubsOutputPath)" />
        <MakeDir Directories="$(RefStubsOutputPath)tmp" />
        <Delete Files="@(_RefStubAssemblyWithTempPath->'%(TmpPath)')" />
        <Message Text="Beginning build of reference stub for @(_RefStubAssemblyWithTempPath)..." Importance="high" />
        <Message Text="$(_IkvmToolExecPrefix)$(IkvmStub) -bootstrap &quot;@(_RefStubAssemblyWithTempPath)&quot; %(Args) -nostdlib -out:%(TmpPath)" Condition=" '%(Identity)' != '' " Importance="high" />
        <Exec Command="$(_IkvmToolExecPrefix)$(IkvmStub) -bootstrap &quot;@(_RefStubAssemblyWithTempPath)&quot; %(Args) -nostdlib -out:%(TmpPath)" Condition=" '%(Identity)' != '' " />
        <Delete Files="@(_RefStubAssemblyWithTempPath->'%(JarPath)')" />
        <Move SourceFiles="@(_RefStubAssemblyWithTempPath->'%(TmpPath)')" DestinationFiles="@(_RefStubAssemblyWithTempPath->'%(JarPath)')" OverwriteReadOnlyFiles="true" />
        <Message Text="Finished build of reference stub for @(_RefStubAssemblyWithTempPath)." Importance="high" />

        <ItemGroup>
            <FileWrites Include="@(_RefStubAssemblyWithTempPath->'%(TmpPath)')" />
            <FileWrites Include="@(_RefStubAssemblyWithTempPath->'%(JarPath)')" />
        </ItemGroup>
    </Target>

    <PropertyGroup>
        <BuildRefStubsDependsOn>
            $(BuildRefStubsDependsOn);
            GetIkvmStubExe;
            ResolveRefStubs;
            _BuildRefStubs;
        </BuildRefStubsDependsOn>
    </PropertyGroup>

    <Target Name="BuildRefStubs" DependsOnTargets="$(BuildRefStubsDependsOn)">

    </Target>

    <Target Name="CleanRefStubs">
        <Delete Files="$(RefStubsOutputPath)**\*" />
        <RemoveDir Directories="$(RefStubsOutputPath)tmp" />
        <RemoveDir Directories="$(RefStubsOutputPath)" />
    </Target>

    <PropertyGroup>
        <CleanDependsOn>
            $(CleanDependsOn);
            CleanRefStubs;
        </CleanDependsOn>
    </PropertyGroup>

    <Target Name="ResolveTransformTemplateVariables">
        <ItemGroup>
            <TransformTemplateVariables Include="OpenJdkImplementationVersion" Value="$(OpenJdkImplementationVersion)" />
            <TransformTemplateVariables Include="OpenJdkSpecificationVersion" Value="$(OpenJdkSpecificationVersion)" />
            <TransformTemplateVariables Include="OpenJdkFullVersion" Value="$(OpenJdkFullVersion)" />
            <TransformTemplateVariables Include="OpenJdkVersion" Value="$(OpenJdkVersion)" />
            <TransformTemplateVariables Include="Version" Value="$(Version)" />
        </ItemGroup>
    </Target>

    <Target Name="ResolveTransformJavaSourceTemplates">
        <ItemGroup>
            <TransformJavaSourceTemplate Include="@(JavaSourceTemplate)">
                <TargetPath>$(JavaSourceTemplateOutputPath)\$([System.String]::new('%(SourcePath)').Replace('/', '\'))</TargetPath>
            </TransformJavaSourceTemplate>
        </ItemGroup>
    </Target>

    <Target Name="TransformJavaSourceTemplates" DependsOnTargets="ResolveTransformJavaSourceTemplates" Inputs="@(TransformJavaSourceTemplate)" Outputs="@(TransformJavaSourceTemplate->'%(TargetPath)')">
        <MakeDir Directories="$(JavaSourceTemplateOutputPath)" />
        <TransformTemplates Items="@(TransformJavaSourceTemplate)" Variables="@(TransformTemplateVariables)" />
        <ItemGroup>
            <JavaSourceTemplateItem Include="@(TransformJavaSourceTemplate->'%(TargetPath)')" />
            <FileWrites Include="@(TransformJavaSourceTemplate->'%(TargetPath)')" />
        </ItemGroup>
    </Target>

    <Target Name="CleanJavaSourceTemplates">
        <Delete Files="$(JavaSourceTemplateOutputPath)\**\*" />
        <RemoveDir Directories="$(JavaSourceTemplateOutputPath)" />
    </Target>

    <PropertyGroup>
        <CleanDependsOn>
            $(CleanDependsOn);
            CleanJavaSourceTemplates;
        </CleanDependsOn>
    </PropertyGroup>

    <Target Name="_ResolveJavaSourceItems" DependsOnTargets="$(TransformJavaSourceTemplates)">
        <ItemGroup>
            <_JavaSourceItems Include="@(JavaSourceTemplateItem)" UniqueKey="%(PackagePath)" />
            <_JavaSourceItems Include="@(JavaSource)" UniqueKey="%(PackagePath)" />
            <_JavaSourceItems Include="@(OpenJdkSource)" UniqueKey="%(OpenJdkSource.PackagePath)" />
        </ItemGroup>
        <DistinctSourceItems Source="@(_JavaSourceItems)">
            <Output TaskParameter="Output" ItemName="_JavaSourceItemsDistinct" />
        </DistinctSourceItems>
        <ItemGroup>
            <JavaSourceItems Include="@(_JavaSourceItemsDistinct)" />
        </ItemGroup>
    </Target>

    <PropertyGroup>
        <ResolveJavaSourceItemsDependsOn>
            $(ResolveJavaSourceItemsDependsOn);
            ResolveTransformJavaSourceTemplates;
            ResolveTransformTemplateVariables;
            TransformJavaSourceTemplates;
            _ResolveJavaSourceItems;
        </ResolveJavaSourceItemsDependsOn>
    </PropertyGroup>

    <Target Name="ResolveJavaSourceItems" DependsOnTargets="$(ResolveJavaSourceItemsDependsOn)">

    </Target>

    <Target Name="ResolveTransformJavaResourceTemplates">
        <ItemGroup>
            <TransformJavaResourceTemplate Include="@(JavaResourceTemplate)">
                <TargetPath>$(JavaResourceTemplateOutputPath)\$([System.String]::new('%(ResourcePath)').Replace('/', '\'))</TargetPath>
            </TransformJavaResourceTemplate>
        </ItemGroup>
    </Target>

    <Target Name="TransformJavaResourceTemplates" DependsOnTargets="ResolveTransformJavaResourceTemplates" Inputs="@(TransformJavaResourceTemplate)" Outputs="@(TransformJavaResourceTemplate->'%(TargetPath)')">
        <MakeDir Directories="$(JavaResourceTemplateOutputPath)" />
        <TransformTemplates Items="@(TransformJavaResourceTemplate)" Variables="@(TransformTemplateVariables)" />
        <ItemGroup>
            <JavaResourceTemplateItem Include="@(TransformJavaResourceTemplate->'%(TargetPath)')" ResourcePath="%(ResourcePath)" />
            <FileWrites Include="@(TransformJavaResourceTemplate->'%(TargetPath)')" />
        </ItemGroup>
    </Target>

    <Target Name="CleanJavaResourceTemplates">
        <Delete Files="$(JavaResourceTemplateOutputPath)\**\*" />
        <RemoveDir Directories="$(JavaResourceTemplateOutputPath)" />
    </Target>

    <PropertyGroup>
        <CleanDependsOn>
            $(CleanDependsOn);
            CleanJavaResourceTemplates;
        </CleanDependsOn>
    </PropertyGroup>

    <Target Name="_ResolveJavaResourceItems" DependsOnTargets="TransformJavaResourceTemplates">
        <ItemGroup>
            <_JavaResourceItems Include="@(JavaResourceTemplateItem)" UniqueKey="%(ResourcePath)" />
            <_JavaResourceItems Include="@(JavaResource)" UniqueKey="%(ResourcePath)" />
            <_JavaResourceItems Include="@(OpenJdkResource)" UniqueKey="%(OpenJdkResource.ResourcePath)" />
        </ItemGroup>
        <DistinctSourceItems Source="@(_JavaResourceItems)">
            <Output TaskParameter="Output" ItemName="_JavaResourceItemsDistinct" />
        </DistinctSourceItems>
        <ItemGroup>
            <JavaResourceItems Include="@(_JavaResourceItemsDistinct)" />
        </ItemGroup>
    </Target>

    <PropertyGroup>
        <ResolveJavaResourceItemsDependsOn>
            $(ResolveJavaResourceItemsDependsOn);
            ResolveTransformJavaResourceTemplates;
            ResolveTransformTemplateVariables;
            TransformJavaResourceTemplates;
            _ResolveJavaResourceItems;
        </ResolveJavaResourceItemsDependsOn>
    </PropertyGroup>

    <Target Name="ResolveJavaResourceItems" DependsOnTargets="$(ResolveJavaResourceItemsDependsOn)">

    </Target>

    <Target Name="ResolveJavaClasspath" DependsOnTargets="BuildRefStubs">
        <ItemGroup>
            <JavaClasspath Include="@(RefStub)" />
            <JavaClasspath Include="@(OpenJdkClasspath)" />
        </ItemGroup>
    </Target>

    <Target Name="_BuildJavaClasses" DependsOnTargets="ResolveJavaSourceItems;ResolveJavaClasspath" Inputs="@(JavaSourceItems)" Outputs="$(JavaClassOutputPath)stamp">
        <ItemGroup>
            <JavacArgs Include="-g" />
            <JavacArgs Include="-nowarn" />
            <JavacArgs Include="-implicit:none" />
            <JavacArgs Include="-parameters" />
            <JavacArgs Include="-cp" />
            <JavacArgs Include="dummy" />
            <JavacArgs Include="-bootclasspath" />
            <JavacArgs Include="@(JavaClasspath->'%(Identity)', '$([System.IO.Path]::PathSeparator)')" />
            <JavacArgs Include="-source" />
            <JavacArgs Include="1.8" />
            <JavacArgs Include="-target" />
            <JavacArgs Include="1.8" />
            <JavacArgs Include="-d" />
            <JavacArgs Include="$(JavaClassOutputPath)" />
            <JavacArgs Include="@(JavaSourceItems->'%(FullPath)')" />
        </ItemGroup>
        <Delete Files="$(IntermediateOutputPath)javac.args.txt" />
        <WriteLinesToFile File="$(IntermediateOutputPath)javac.args.txt" Lines="@(JavacArgs)" />

        <Delete Files="$(JavaClassOutputPath)**\*" />
        <RemoveDir Directories="$(JavaClassOutputPath)" />
        <MakeDir Directories="$(JavaClassOutputPath)" />
        <Message Text="Beginning compilation of Java classes for OpenJDK..." Importance="high" />
        <Message Text="javac -J-Xmx1536M @(JavacArgs, ' ')" />
        <Exec Command="javac -J-Xmx1536M @$(IntermediateOutputPath)javac.args.txt" />
        <Touch Files="$(JavaClassOutputPath)stamp" AlwaysCreate="true" ForceTouch="true" />
        <Message Text="Finished compilation of Java classes for OpenJDK." Importance="high" />

        <ItemGroup>
            <FileWrites Include="$(IntermediateOutputPath)javac.args.txt" />
            <FileWrites Include="$(JavaClassOutputPath)\**\*.class" />
            <FileWrites Include="$(JavaClassOutputPath)\stamp" />
        </ItemGroup>
    </Target>

    <PropertyGroup>
        <BuildJavaClassesDependsOn>
            $(BuildJavaClassesDependsOn)
            ResolveJavaSourceItems;
            ResolveJavaClasspath;
            _BuildJavaClasses;
        </BuildJavaClassesDependsOn>
    </PropertyGroup>

    <Target Name="BuildJavaClasses" DependsOnTargets="$(BuildJavaClassesDependsOn)">

    </Target>

    <Target Name="CleanJavaClasses">
        <Delete Files="$(IntermediateOutputPath)javac.args.txt" />
        <Delete Files="$(JavaClassOutputPath)**\*" />
        <RemoveDir Directories="$(JavaClassOutputPath)" />
    </Target>

    <PropertyGroup>
        <CleanDependsOn>
            $(CleanDependsOn);
            CleanJavaClasses;
        </CleanDependsOn>
    </PropertyGroup>

    <Target Name="BuildRmiStubs" DependsOnTargets="BuildJavaClasses" Inputs="$(JavaClassOutputPath)\**\*.class" Outputs="$(RmiStubsOutputPath)stamp">
        <Delete Files="$(RmiStubsOutputPath)**\*" />
        <RemoveDir Directories="$(RmiStubsOutputPath)" />
        <MakeDir Directories="$(RmiStubsOutputPath)" />

        <PropertyGroup>
            <RmiArgs>-J-client -J-Xmx896m -J-Xms128m -nowarn -bootclasspath @(JavaClasspath);$(JavaClassOutputPath) -d $(RmiStubsOutputPath)</RmiArgs>
        </PropertyGroup>

        <Exec Command="rmic $(RmiArgs) -v1.1 sun.rmi.registry.RegistryImpl" />
        <Exec Command="rmic $(RmiArgs) -v1.1 sun.rmi.transport.DGCImpl" />
        <Exec Command="rmic $(RmiArgs) -v1.2 sun.rmi.server.Activation$ActivationSystemImpl" />
        <Exec Command="rmic $(RmiArgs) -v1.2 java.rmi.activation.ActivationGroup" />
        <Exec Command="rmic $(RmiArgs) -v1.2 com.sun.jndi.rmi.registry.ReferenceWrapper" />
        <Exec Command="rmic $(RmiArgs) -v1.2 javax.management.remote.rmi.RMIConnectionImpl" />
        <Exec Command="rmic $(RmiArgs) -v1.2 -iiop javax.management.remote.rmi.RMIConnectionImpl" />
        <Exec Command="rmic $(RmiArgs) -v1.2 -iiop -standardPackage javax.management.remote.rmi.RMIConnectionImpl" />
        <Exec Command="rmic $(RmiArgs) -v1.2 javax.management.remote.rmi.RMIServerImpl" />
        <Exec Command="rmic $(RmiArgs) -v1.2 -iiop javax.management.remote.rmi.RMIServerImpl" />
        <Exec Command="rmic $(RmiArgs) -v1.2 -iiop -standardPackage javax.management.remote.rmi.RMIServerImpl" />
        <Exec Command="rmic $(RmiArgs) -iiop javax.management.remote.rmi.RMIConnection" />
        <Exec Command="rmic $(RmiArgs) -iiop -standardPackage javax.management.remote.rmi.RMIConnection" />
        <Exec Command="rmic $(RmiArgs) -iiop javax.management.remote.rmi.RMIServer" />
        <Exec Command="rmic $(RmiArgs) -iiop -standardPackage javax.management.remote.rmi.RMIServer" />
        <Touch Files="$(RmiStubsOutputPath)stamp" AlwaysCreate="true" ForceTouch="true" />

        <ItemGroup>
            <FileWrites Include="$(RmiStubsOutputPath)**\*.class" />
            <FileWrites Include="$(RmiStubsOutputPath)stamp" />
        </ItemGroup>
    </Target>

    <Target Name="CleanRmiStubs">
        <Delete Files="$(RmiStubsOutputPath)**\*" />
        <RemoveDir Directories="$(RmiStubsOutputPath)" />
    </Target>

    <PropertyGroup>
        <CleanDependsOn>
            $(CleanDependsOn);
            CleanRmiStubs;
        </CleanDependsOn>
    </PropertyGroup>

    <Target Name="GetIkvmcExe" DependsOnTargets="ResolveProjectReferences">
        <MSBuild Projects="@(_MSBuildProjectReferenceExistent)" Targets="Build" BuildInParallel="$(BuildInParallel)" Properties="%(_MSBuildProjectReferenceExistent.SetConfiguration);%(_MSBuildProjectReferenceExistent.SetPlatform);%(_MSBuildProjectReferenceExistent.SetTargetFramework)" RemoveProperties="%(_MSBuildProjectReferenceExistent.GlobalPropertiesToRemove)$(_GlobalPropertiesToRemoveFromProjectReferences)" Condition=" '%(_MSBuildProjectReferenceExistent.IsIkvmc)' == 'true' ">
            <Output TaskParameter="TargetOutputs" ItemName="_Ikvmc" />
        </MSBuild>
        <PropertyGroup>
            <Ikvmc>@(_Ikvmc)</Ikvmc>
        </PropertyGroup>
        <Message Text="Using ikvmc executable at '$(Ikvmc)'." Importance="high" />
    </Target>

    <Target Name="GetIkvmRuntimeDll" DependsOnTargets="ResolveProjectReferences">
        <MSBuild Projects="@(_MSBuildProjectReferenceExistent)" Targets="Build" BuildInParallel="$(BuildInParallel)" Properties="%(_MSBuildProjectReferenceExistent.SetConfiguration);%(_MSBuildProjectReferenceExistent.SetPlatform);%(_MSBuildProjectReferenceExistent.SetTargetFramework)" RemoveProperties="%(_MSBuildProjectReferenceExistent.GlobalPropertiesToRemove)$(_GlobalPropertiesToRemoveFromProjectReferences)" Condition=" '%(_MSBuildProjectReferenceExistent.IsIkvmRuntimeDll)' == 'true' ">
            <Output TaskParameter="TargetOutputs" ItemName="_IkvmRuntimeDll" />
        </MSBuild>
        <PropertyGroup>
            <IkvmRuntimeDll>@(_IkvmRuntimeDll)</IkvmRuntimeDll>
        </PropertyGroup>
    </Target>

    <Target Name="ResolveJavaClassItems" DependsOnTargets="BuildJavaClasses;BuildRmiStubs">
        <ItemGroup>
            <JavaClassItems Include="$(JavaClassOutputPath)**\*.class" />
            <JavaClassItems Include="$(RmiStubsOutputPath)**\*.class" />
        </ItemGroup>
    </Target>

    <Target Name="_BuildOpenJdkAssembly" DependsOnTargets="GetIkvmcExe;GetIkvmRuntimeDll;ResolveJavaClassItems;ResolveJavaResourceItems;BuildRmiStubs" Inputs="@(JavaClassItems);@(JavaResourceItems);$(IkvmRuntimeDll);$(Ikvmc);@(ReferencePathWithRefAssemblies);$(ResourcesZipPath);@(IkvmMapFile)" Outputs="$(OpenJdkAssemblyPath);$(OpenJdkDebugSymbolsPath)">
        <Delete Files="$(IntermediateOutputPath)ikvmc.exclude.txt" />
        <WriteLinesToFile File="$(IntermediateOutputPath)ikvmc.exclude.txt" Lines="@(OpenJdkExcludeRegex)" />

        <RemoveDuplicates Inputs="@(ReferencePathWithRefAssemblies)">
            <Output TaskParameter="Filtered" ItemName="_BuildOpenJdkReferencePath" />
        </RemoveDuplicates>

        <ItemGroup>
            <IkvmcArgs Include="-debug" Condition=" '$(DebugSymbols)' == 'true' " />
            <IkvmcArgs Include="-assembly:$(AssemblyName)" />
            <IkvmcArgs Include="-version:$(AssemblyVersion)" />
            <IkvmcArgs Include="-runtime:$(IkvmRuntimeDll)" />
            <IkvmcArgs Include="-keyfile:$(AssemblyOriginatorKeyFile)" Condition=" '$(TargetFramework)' == 'net461' And '$(SignAssembly)' == 'true' " />
            <IkvmcArgs Include="@(IkvmMapFile->'-remap:%(FullPath)')" />
            <IkvmcArgs Include="-compressresources" />
            <IkvmcArgs Include="-opt:fields" />
            <IkvmcArgs Include="-strictfinalfieldsemantics" />
            <IkvmcArgs Include="-removeassertions" />
            <IkvmcArgs Include="-target:library" />
            <IkvmcArgs Include="-nostdlib" />
            <IkvmcArgs Include="-sharedclassloader" />
            <IkvmcArgs Include="-nowarn:110" />
            <IkvmcArgs Include="-w4" />
            <IkvmcArgs Include="-noparameterreflection" />
            <IkvmcArgs Include="-exclude:$([System.IO.Path]::GetFullPath('$(MSBuildThisFileDirectory)$(IntermediateOutputPath)ikvmc.exclude.txt'))" />
            <IkvmcArgs Include="@(_BuildOpenJdkReferencePath->'-reference:%(FullPath)')" />
            <IkvmcArgs Include="@(JavaResourceItems->'-resource:%(ResourcePath)=%(FullPath)')" />
            <IkvmcArgs Include="@(JavaClassItems->'%(FullPath)')" />
        </ItemGroup>

        <Delete Files="$(IntermediateOutputPath)ikvmc.args.txt" />
        <WriteLinesToFile File="$(IntermediateOutputPath)ikvmc.args.txt" Lines="@(IkvmcArgs)" />
        <MakeDir Directories="$(IntermediateOutputPath)openjdk" />
        <Message Text="Beginning translation of Java classes to .NET assemblies..." />
        <Message Text="$(_IkvmToolExecPrefix)$(Ikvmc) -out:$(IntermediateOutputPath)openjdk\openjdk.dll @(IkvmcArgs, ' ')" />
        <Exec Command="$(_IkvmToolExecPrefix)$(Ikvmc) -out:$(IntermediateOutputPath)openjdk\openjdk.dll @$(IntermediateOutputPath)ikvmc.args.txt" />
        <Delete Files="$(OpenJdkAssemblyPath);$(OpenJdkDebugSymbolsPath)" />
        <Move SourceFiles="$(IntermediateOutputPath)openjdk\openjdk.dll;$(IntermediateOutputPath)openjdk\openjdk.pdb" DestinationFiles="$(OpenJdkAssemblyPath);$(OpenJdkDebugSymbolsPath)" OverwriteReadOnlyFiles="true" />
        <Delete Files="$(IntermediateOutputPath)openjdk\openjdk.dll;$(IntermediateOutputPath)openjdk\openjdk.pdb" />
        <Message Text="Finished translation Java classes to .NET assemblies." />

        <ItemGroup>
            <FileWrites Include="$(IntermediateOutputPath)ikvmc.args.txt" />
            <FileWrites Include="$(IntermediateOutputPath)ikvmc.exclude.txt" />
            <FileWrites Include="$(IntermediateOutputPath)openjdk\openjdk.dll;$(IntermediateOutputPath)openjdk\openjdk.pdb" />
        </ItemGroup>
    </Target>

    <PropertyGroup>
        <BuildOpenJdkAssemblyDependsOn>
            $(BuildOpenJdkAssemblyDependsOn);
            GetIkvmcExe;
            GetIkvmRuntimeDll;
            ResolveJavaClassItems;
            ResolveJavaResourceItems;
            BuildRmiStubs;
            _BuildOpenJdkAssembly;
        </BuildOpenJdkAssemblyDependsOn>
    </PropertyGroup>

    <Target Name="BuildOpenJdkAssembly" DependsOnTargets="$(BuildOpenJdkAssemblyDependsOn)">

    </Target>

    <Target Name="CleanOpenJdkAssembly">
        <Delete Files="$(IntermediateOutputPath)ikvmc.exclude.txt" />
        <Delete Files="$(IntermediateOutputPath)ikvmc.args.txt" />
        <Delete Files="$(IntermediateOutputPath)\openjdk\openjdk.dll;$(IntermediateOutputPath)\openjdk\openjdk.pdb" />
        <Delete Files="$(OpenJdkAssemblyPath);$(OpenJdkDebugSymbolsPath)" />
    </Target>

    <PropertyGroup>
        <CleanDependsOn>
            $(CleanDependsOn);
            CleanOpenJdkAssembly;
        </CleanDependsOn>
    </PropertyGroup>

    <PropertyGroup>
        <BuildDependsOn>
            BuildOpenJdkAssembly;
            BuildResourcesZip;
            $(BuildDependsOn);
        </BuildDependsOn>
    </PropertyGroup>

    <PropertyGroup>
        <_MergeOpenJdkAssemblyForceBuildFile>$(IntermediateOutputPath)openjdkforcemerge</_MergeOpenJdkAssemblyForceBuildFile>
    </PropertyGroup>

    <PropertyGroup>
        <ILRepackToolsPath Condition=" '$(MSBuildRuntimeType)' == 'Core' ">$(PkgILRepack_Lib_MSBuild)\tools\netcoreapp3.1</ILRepackToolsPath>
        <ILRepackToolsPath Condition=" '$(MSBuildRuntimeType)' != 'Core' ">$(PkgILRepack_Lib_MSBuild)\tools\net461</ILRepackToolsPath>
    </PropertyGroup>

    <UsingTask AssemblyFile="$(ILRepackToolsPath)\ILRepack.Lib.MSBuild.dll" TaskName="ILRepack" Condition=" Exists('$(ILRepackToolsPath)\ILRepack.Lib.MSBuild.dll') " />

    <Target Name="_MergeOpenJdkAssembly" DependsOnTargets="BuildOpenJdkAssembly" Condition="'$(_MergeOpenJdkAssemblyTimestampBeforeCompile)' != '$(_MergeOpenJdkAssemblyTimestampAfterCompile)' Or Exists('$(_MergeOpenJdkAssemblyForceBuildFile)')">
        <!-- Create a file which will force the next build to run this target if the previous build failed. 
             Failure between this point and the point where intermediate outputs are moved will make CoreCompile not run again (up-to-date outputs).
             That in turn results in timestamps being equal, this target not running and untransformed assemblies being copied to the output. -->
        <Touch Files="$(_MergeOpenJdkAssemblyForceBuildFile)" AlwaysCreate="true" ContinueOnError="true" />

        <!-- ILRepack requires that reference paths be directories. Find the directory of each reference item. -->
        <ItemGroup>
            <ILRepackReferences Include="@(ReferencePathWithRefAssemblies)" />
            <ILRepackReferencePath Include="$([System.String]::new(%(ILRepackReferences.RelativeDir)).TrimEnd('\'))" />
        </ItemGroup>
        <RemoveDuplicates Inputs="@(ILRepackReferencePath)">
            <Output TaskParameter="Filtered" ItemName="ILRepackFilteredLibraryPaths" />
        </RemoveDuplicates>

        <!-- move the intermediate assembly to a temporary path, it's absense will cause CoreCompile to run again if we fail -->
        <MakeDir Directories="$(IntermediateOutputPath)merge\tmp" />
        <Delete Files="$(IntermediateOutputPath)merge\tmp\$(TargetName)$(TargetExt);$(IntermediateOutputPath)merge\tmp\$(TargetName).pdb" />
        <Move SourceFiles="$(IntermediateOutputPath)$(TargetName)$(TargetExt)" DestinationFiles="$(IntermediateOutputPath)merge\tmp\$(TargetName)$(TargetExt)" OverwriteReadOnlyFiles="true" />
        <Move SourceFiles="$(IntermediateOutputPath)$(TargetName).pdb" DestinationFiles="$(IntermediateOutputPath)merge\tmp\$(TargetName).pdb" OverwriteReadOnlyFiles="true" />

        <!-- At this point original intermediate outputs are moved, so CoreCompile will always run if build fails after this point. -->
        <Delete Files="$(_MergeOpenJdkAssemblyForceBuildFile)" ContinueOnError="True" />

        <!-- repack assemblies -->
        <ILRepack DebugInfo="true" AllowDuplicateResources="false" CopyAttributes="true" AllowMultiple="true" XmlDocumentation="true" InputAssemblies="$(IntermediateOutputPath)merge\tmp\$(TargetName)$(TargetExt);$(OpenJdkAssemblyPath)" TargetKind="SameAsPrimaryAssembly" LibraryPath="@(ILRepackFilteredLibraryPaths)" OutputFile="$(IntermediateOutputPath)merge\$(TargetName)$(TargetExt)" KeyFile="$(AssemblyOriginatorKeyFile)" Verbose="true" Condition=" '$(TargetFramework)' == 'net461' And '$(SignAssembly)' == 'true' " />
        <ILRepack DebugInfo="true" AllowDuplicateResources="false" CopyAttributes="true" AllowMultiple="true" XmlDocumentation="true" InputAssemblies="$(IntermediateOutputPath)merge\tmp\$(TargetName)$(TargetExt);$(OpenJdkAssemblyPath)" TargetKind="SameAsPrimaryAssembly" LibraryPath="@(ILRepackFilteredLibraryPaths)" OutputFile="$(IntermediateOutputPath)merge\$(TargetName)$(TargetExt)" Verbose="true" Condition=" '$(TargetFramework)' != 'net461' Or '$(SignAssembly)' != 'true' " />
        <Delete Files="$(IntermediateOutputPath)merge\tmp\$(TargetName)$(TargetExt);$(IntermediateOutputPath)merge\tmp\$(TargetName).pdb" />
        <RemoveDir Directories="$(IntermediateOutputPath)merge\tmp" />

        <!-- replace original intermediate assembly -->
        <Move SourceFiles="$(IntermediateOutputPath)merge\$(TargetName)$(TargetExt)" DestinationFiles="$(IntermediateOutputPath)$(TargetName)$(TargetExt)" OverwriteReadOnlyFiles="true" />
        <Move SourceFiles="$(IntermediateOutputPath)merge\$(TargetName).pdb" DestinationFiles="$(IntermediateOutputPath)$(TargetName).pdb" OverwriteReadOnlyFiles="true" />
        <RemoveDir Directories="$(IntermediateOutputPath)merge" />
    </Target>

    <PropertyGroup>
        <MergeOpenJdkAssemblyDependsOn>
            $(MergeOpenJdkAssemblyDependsOn);
            BuildOpenJdkAssembly;
            _MergeOpenJdkAssembly;
        </MergeOpenJdkAssemblyDependsOn>
    </PropertyGroup>

    <Target Name="MergeOpenJdkAssembly" DependsOnTargets="$(MergeOpenJdkAssemblyDependsOn)">

    </Target>

    <Target Name="MergeOpenJdkAssemblyTimestampBeforeCompile">
        <PropertyGroup>
            <_MergeOpenJdkAssemblyTimestampBeforeCompile>%(IntermediateAssembly.ModifiedTime)</_MergeOpenJdkAssemblyTimestampBeforeCompile>
        </PropertyGroup>
    </Target>

    <Target Name="MergeOpenJdkAssemblyTimestampAfterCompile">
        <PropertyGroup>
            <_MergeOpenJdkAssemblyTimestampAfterCompile>%(IntermediateAssembly.ModifiedTime)</_MergeOpenJdkAssemblyTimestampAfterCompile>
        </PropertyGroup>
    </Target>

    <PropertyGroup>
        <CompileDependsOn>
            MergeOpenJdkAssemblyTimestampBeforeCompile;
            $(CompileDependsOn);
            MergeOpenJdkAssemblyTimestampAfterCompile;
            MergeOpenJdkAssembly;
        </CompileDependsOn>
    </PropertyGroup>

</Project>