<Project>
    <Import Project="Sdk.props" Sdk="Microsoft.NET.Sdk" />
    <Import Project="..\openjdk.props" />

    <PropertyGroup>
        <PackageId>IKVM.OpenJDK</PackageId>
        <TargetFrameworks>net461</TargetFrameworks>
        <AssemblyName>IKVM.OpenJDK</AssemblyName>
        <AssemblyTitle>IKVM.NET OpenJDK Platform</AssemblyTitle>
        <Description>JVM for Mono and .NET</Description>
    </PropertyGroup>

    <ItemGroup>
        <InternalsVisibleTo Include="IKVM.Runtime" />
        <InternalsVisibleTo Include="IKVM.Runtime.JNI" />
    </ItemGroup>

    <ItemGroup>
        <ProjectReference Include="..\IKVM.Runtime-ref\IKVM.Runtime-ref.csproj">
            <PrivateAssets>All</PrivateAssets>
            <Private>False</Private>
        </ProjectReference>
        <ProjectReference Include="..\ikvmc\ikvmc.csproj">
            <PrivateAssets>All</PrivateAssets>
            <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
            <Private>False</Private>
        </ProjectReference>
        <ProjectReference Include="..\ikvmstub\ikvmstub.csproj">
            <PrivateAssets>All</PrivateAssets>
            <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
            <Private>False</Private>
        </ProjectReference>
    </ItemGroup>

    <ItemGroup>
        <PackageReference Include="ILRepack.Lib.MSBuild" Version="2.1.18" />
    </ItemGroup>

    <ItemGroup Condition=" '$(TargetFramework)' == 'netcoreapp3.1' ">
        <PackageReference Include="System.CodeDom" Version="6.0.0" />
        <PackageReference Include="System.Data.OleDb" Version="6.0.0" />
        <PackageReference Include="System.Data.SqlClient" Version="4.8.3" />
        <PackageReference Include="System.Diagnostics.PerformanceCounter" Version="6.0.1" />
        <PackageReference Include="System.IO.Packaging" Version="6.0.0" />
        <PackageReference Include="System.IO.Pipes" Version="4.3.0" />
        <PackageReference Include="System.IO.Pipes.AccessControl" Version="5.0.0" />
        <PackageReference Include="System.IO.Ports" Version="6.0.0" />
        <PackageReference Include="System.Security.Cryptography.Xml" Version="6.0.0" />
        <PackageReference Include="System.Security.Permissions" Version="6.0.0" />
        <PackageReference Include="System.Configuration.ConfigurationManager" Version="6.0.0" />
        <PackageReference Include="System.Drawing.Primitives " Version="4.3.0" />
        <PackageReference Include="System.Drawing.Common" Version="6.0.0" />
        <PackageReference Include="System.IO.FileSystem.AccessControl" Version="5.0.0" />
        <PackageReference Include="System.Security.AccessControl" Version="6.0.0" />
        <PackageReference Include="System.Security.Principal.Windows" Version="5.0.0" />
        <PackageReference Include="System.Security.Cryptography.Cng" Version="5.0.0" />
        <PackageReference Include="System.ServiceModel.Syndication" Version="6.0.0" />
        <PackageReference Include="System.ServiceProcess.ServiceController" Version="6.0.0" />
        <PackageReference Include="System.Threading.AccessControl" Version="6.0.0" />
        <PackageReference Include="System.Data.Odbc" Version="6.0.0" />
    </ItemGroup>

    <ItemDefinitionGroup>
        <JavaSource>
            <TargetFramework></TargetFramework>
        </JavaSource>
        <JavaSourceTemplate>
            <TargetFramework></TargetFramework>
        </JavaSourceTemplate>
        <StubAssembly>
            <Args></Args>
        </StubAssembly>
    </ItemDefinitionGroup>

    <ItemGroup>
        <JavaSource Include="src\**\*.java" SourcePath="%(RecursiveDir)%(Filename)%(Extension)" />
        <JavaSource Update="src\**\*.netcoreapp3_1.java" SourcePath="%(RecursiveDir)%(Filename)" TargetFramework="netcoreapp3.1" />
        <JavaSource Update="src\**\*.net461.java" SourcePath="%(RecursiveDir)%(Filename)" TargetFramework="net461" />
        <JavaSourceTemplate Include="src\**\*.java.in" SourcePath="%(RecursiveDir)%(Filename)" />
        <JavaSourceTemplate Update="src\**\*.netcoreapp3_1.java.in" SourcePath="%(RecursiveDir)%(Filename)" TargetFramework="netcoreapp3.1" />
        <JavaSourceTemplate Update="src\**\*.net461.java.in" SourcePath="%(RecursiveDir)%(Filename)" TargetFramework="net461" />
    </ItemGroup>

    <ItemGroup>
        <JavaResource Include="res\**\*" ResourcePath="%(RecursiveDir)%(Filename)%(Extension)" />
        <JavaResource Update="res\**\*.netcoreapp3_1" ResourcePath="%(RecursiveDir)%(Filename)" TargetFramework="netcoreapp3.1" />
        <JavaResource Update="res\**\*.net461" ResourcePath="%(RecursiveDir)%(Filename)" TargetFramework="net461" />
        <JavaResourceTemplate Include="res\**\*.in" ResourcePath="%(RecursiveDir)%(Filename)" />
        <JavaResourceTemplate Update="src\**\*.netcoreapp3_1.in" ResourcePath="%(RecursiveDir)%(Filename)" TargetFramework="netcoreapp3.1" />
        <JavaResourceTemplate Update="src\**\*.net461.in" ResourcePath="%(RecursiveDir)%(Filename)" TargetFramework="net461" />
    </ItemGroup>

    <ItemGroup>
        <OpenJdkClasspath Include="$(OpenJdkDir)\jdk\src\share\classes" />
        <OpenJdkClasspath Include="$(OpenJdkDir)\corba\src\share\classes" />
        <OpenJdkClasspath Include="$(OpenJdkDir)\build\linux-x86_64-normal-server-release\jdk\gensrc" />
    </ItemGroup>

    <PropertyGroup>
        <TargetsTriggeredByCompilation>
            $(TargetsTriggeredByCompilation);
            MergeOpenJdkAssembly;
        </TargetsTriggeredByCompilation>
    </PropertyGroup>

    <Import Project="Sdk.targets" Sdk="Microsoft.NET.Sdk" />

    <PropertyGroup>
        <JavaSourceTemplateOutputPath>$(IntermediateOutputPath)src</JavaSourceTemplateOutputPath>
        <JavaResourceTemplateOutputPath>$(IntermediateOutputPath)res</JavaResourceTemplateOutputPath>
        <RefStubsOutputPath>$(IntermediateOutputPath)refstubs</RefStubsOutputPath>
        <RmiStubsOutputPath>$(IntermediateOutputPath)rmistubs</RmiStubsOutputPath>
        <ResourcesZipTempPath>$(IntermediateOutputPath)resources_zip</ResourcesZipTempPath>
        <ResourcesZipPath>$(IntermediateOutputPath)resources.zip</ResourcesZipPath>
        <JavaClassOutputPath>$(IntermediateOutputPath)classes</JavaClassOutputPath>
        <OpenJdkAssemblyPath>$(IntermediateOutputPath)openjdk.dll</OpenJdkAssemblyPath>
    </PropertyGroup>

    <ItemGroup>
        <UpToDateCheckInput Include="$(OpenJdkAssemblyPath)" />
        <CustomAdditionalCompileInputs Include="$(OpenJdkAssemblyPath)" />
    </ItemGroup>

    <PropertyGroup>
        <BuildDependsOn>
            BuildResourcesZip;
            BuildOpenJdkAssembly;
            $(BuildDependsOn);
        </BuildDependsOn>
    </PropertyGroup>

    <UsingTask TaskName="TransformTemplates" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
        <ParameterGroup>
            <Items ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
        </ParameterGroup>
        <Task>
            <Using Namespace="System" />
            <Using Namespace="System.Collections.Generic" />
            <Using Namespace="System.Text.RegularExpressions" />
            <Code Type="Fragment" Language="cs">
                <![CDATA[
                foreach (var i in Items)
                {
                    var fullPath = i.GetMetadata("FullPath");
                    var destPath = i.GetMetadata("Destination");
                    Directory.CreateDirectory(Path.GetDirectoryName(destPath));
                    File.Copy(fullPath, destPath, true);
                }
            ]]>
            </Code>
        </Task>
    </UsingTask>

    <UsingTask TaskName="DistinctSourceItems" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
        <ParameterGroup>
            <Source ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
            <Output ParameterType="Microsoft.Build.Framework.ITaskItem[]" Output="true" />
        </ParameterGroup>
        <Task>
            <Using Namespace="System" />
            <Using Namespace="System.Collections.Generic" />
            <Code Type="Fragment" Language="cs">
                <![CDATA[
                var hs = new Dictionary<string, ITaskItem>();
                foreach (var i in Source)
                    hs[i.GetMetadata("Key")] = i;
                Output = hs.Values.ToArray();
            ]]>
            </Code>
        </Task>
    </UsingTask>

    <PropertyGroup>
        <CompileDependsOn>
            BuildResourcesZip;
            $(CompileDependsOn);
        </CompileDependsOn>
    </PropertyGroup>

    <Target Name="_BuildResourcesZip" Inputs="@(ResourcesZipIncludeFile)" Outputs="$(ResourcesZipPath)">
        <Delete Files="$(ResourcesZipTempPath)\**\*" />
        <RemoveDir Directories="$(ResourcesZipTempPath)" />
        <MakeDir Directories="$(ResourcesZipTempPath)" />
        <Copy SourceFiles="@(ResourcesZipIncludeFile)" DestinationFolder="$(ResourcesZipTempPath)\%(RecursiveDir)" />
        <Delete Files="$(ResourcesZipPath)" />
        <ZipDirectory SourceDirectory="$(ResourcesZipTempPath)" DestinationFile="$(ResourcesZipPath)" />
        <ItemGroup>
            <FileWrites Include="$(ResourcesZipTempPath)\**\*" />
            <FileWrites Include="$(ResourcesZipPath)" />
        </ItemGroup>
    </Target>

    <Target Name="BuildResourcesZip" DependsOnTargets="_BuildResourcesZip">
        <ItemGroup>
            <EmbeddedResource Include="$(ResourcesZipPath)">
                <LogicalName>resources.zip</LogicalName>
            </EmbeddedResource>
        </ItemGroup>
    </Target>

    <Target Name="GetIkvmStubExe" DependsOnTargets="ResolveProjectReferences">
        <MSBuild Projects="@(_MSBuildProjectReferenceExistent)" Targets="GetTargetPath" BuildInParallel="$(BuildInParallel)" Properties="%(_MSBuildProjectReferenceExistent.SetConfiguration);%(_MSBuildProjectReferenceExistent.SetPlatform);%(_MSBuildProjectReferenceExistent.SetTargetFramework)" RemoveProperties="%(_MSBuildProjectReferenceExistent.GlobalPropertiesToRemove)$(_GlobalPropertiesToRemoveFromProjectReferences)" Condition=" '%(_MSBuildProjectReferenceExistent.Identity)' == '..\ikvmstub\ikvmstub.csproj' ">
            <Output TaskParameter="TargetOutputs" ItemName="_IkvmStub" />
        </MSBuild>
        <PropertyGroup>
            <IkvmStub>@(_IkvmStub)</IkvmStub>
        </PropertyGroup>
    </Target>

    <Target Name="ResolveIkvmRuntimeAssembly" DependsOnTargets="ResolveProjectReferences">
        <MSBuild Projects="@(_MSBuildProjectReferenceExistent)" Targets="GetTargetPath" BuildInParallel="$(BuildInParallel)" Properties="%(_MSBuildProjectReferenceExistent.SetConfiguration);%(_MSBuildProjectReferenceExistent.SetPlatform);%(_MSBuildProjectReferenceExistent.SetTargetFramework)" RemoveProperties="%(_MSBuildProjectReferenceExistent.GlobalPropertiesToRemove)$(_GlobalPropertiesToRemoveFromProjectReferences)" Condition=" '%(_MSBuildProjectReferenceExistent.Identity)' == '..\IKVM.Runtime-ref\IKVM.Runtime-ref.csproj' ">
            <Output TaskParameter="TargetOutputs" ItemName="StubAssembly" />
        </MSBuild>
    </Target>

    <Target Name="ResolveRefStubs" DependsOnTargets="ResolveIkvmRuntimeAssembly;ResolveProjectReferences;ResolveAssemblyReferences">
        <PropertyGroup>
            <_RefStubArgs>@(_ResolveAssemblyReferenceResolvedFiles->'-r:"%(Identity)"', ' ')</_RefStubArgs>
        </PropertyGroup>
        <ItemGroup>
            <_RefStubAssembly Include="@(_ResolveAssemblyReferenceResolvedFiles)">
                <JarPath>$(RefStubsOutputPath)\%(Filename).jar</JarPath>
                <Args>$(_RefStubArgs)</Args>
            </_RefStubAssembly>
        </ItemGroup>
    </Target>

    <Target Name="BuildRefStubs" DependsOnTargets="ResolveRefStubs;GetIkvmStubExe" Inputs="@(_RefStubAssembly)" Outputs="%(JarPath)">
        <MakeDir Directories="$(RefStubsOutputPath)" />

        <!-- this is wrong, determination of which version to use to build needs to be based on which platform we're running on -->
        <PropertyGroup Condition="$(TargetFramework.StartsWith('net4'))">
            <IkvmStubExec>$(IkvmStub)</IkvmStubExec>
        </PropertyGroup>
        <PropertyGroup Condition="$(TargetFramework.StartsWith('netstandard')) Or $(TargetFramework.StartsWith('netcore'))">
            <IkvmStubExec>dotnet exec $(IkvmStub) -forwarders</IkvmStubExec>
        </PropertyGroup>

        <Message Text="$(IkvmStubExec) -bootstrap &quot;@(_RefStubAssembly)&quot; %(Args) -out:%(JarPath).tmp" Condition=" '%(Identity)' != '' " Importance="high" />
        <Exec Command="$(IkvmStubExec) -bootstrap &quot;@(_RefStubAssembly)&quot; %(Args) -out:%(JarPath).tmp" Condition=" '%(Identity)' != '' " />
        <Move SourceFiles="@(_RefStubAssembly->'%(JarPath).tmp')" DestinationFiles="@(_RefStubAssembly->'%(JarPath)')" OverwriteReadOnlyFiles="true" />

        <ItemGroup>
            <RefStubJar Include="@(_RefStubAssembly->'%(JarPath)')" />
            <FileWrites Include="@(_RefStubAssembly->'%(JarPath).tmp')" />
            <FileWrites Include="@(_RefStubAssembly->'%(JarPath)')" />
        </ItemGroup>
    </Target>

    <Target Name="ResolveTransformJavaSourceTemplates">
        <ItemGroup>
            <TransformJavaSourceTemplate Include="@(JavaSourceTemplate)" Condition=" '%(JavaSourceTemplate.TargetFramework)' == '' Or '%(TargetFramework)' == '$(TargetFramework)' ">
                <Destination>$(JavaSourceTemplateOutputPath)\%(SourcePath)</Destination>
            </TransformJavaSourceTemplate>
        </ItemGroup>
    </Target>

    <Target Name="TransformJavaSourceTemplates" DependsOnTargets="ResolveTransformJavaSourceTemplates" Inputs="@(TransformJavaSourceTemplate)" Outputs="@(TransformJavaSourceTemplate->'%(Destination)')">
        <MakeDir Directories="$(JavaSourceTemplateOutputPath)" />
        <TransformTemplates Items="@(TransformJavaSourceTemplate)" />
        <ItemGroup>
            <JavaSourceTemplateItem Include="@(TransformJavaSourceTemplate->'%(Destination)')" SourcePath="%(SourcePath)" />
            <FileWrites Include="@(TransformJavaSourceTemplate->'%(Destination)')" />
        </ItemGroup>
    </Target>

    <Target Name="_ResolveJavaSourceItems" DependsOnTargets="$(TransformJavaSourceTemplates)">
        <ItemGroup>
            <_JavaSourceItems Include="@(OpenJdkCompile)" Condition=" '%(Extension)' == '.java' ">
                <Key>%(SourcePath)</Key>
            </_JavaSourceItems>
            <_JavaSourceItems Include="@(JavaSource)" Condition=" '%(JavaSource.TargetFramework)' == '' Or '%(JavaSource.TargetFramework)' == '$(TargetFramework)' ">
                <Key>%(SourcePath)</Key>
            </_JavaSourceItems>
            <_JavaSourceItems Include="@(JavaSourceTemplateItem)">
                <Key>%(SourcePath)</Key>
            </_JavaSourceItems>
        </ItemGroup>
        <DistinctSourceItems Source="@(_JavaSourceItems)">
            <Output TaskParameter="Output" ItemName="_JavaSourceItemsDistinct" />
        </DistinctSourceItems>
        <ItemGroup>
            <JavaSourceItems Include="@(_JavaSourceItemsDistinct)" />
        </ItemGroup>
    </Target>

    <PropertyGroup>
        <ResolveJavaSourceItemsDependsOn>
            $(ResolveJavaSourceItemsDependsOn);
            ResolveTransformJavaSourceTemplates;
            TransformJavaSourceTemplates;
            _ResolveJavaSourceItems;
        </ResolveJavaSourceItemsDependsOn>
    </PropertyGroup>

    <Target Name="ResolveJavaSourceItems" DependsOnTargets="$(ResolveJavaSourceItemsDependsOn)">

    </Target>

    <Target Name="ResolveTransformJavaResourceTemplates">
        <ItemGroup>
            <TransformJavaResourceTemplate Include="@(JavaResourceTemplate)">
                <Destination>$(JavaResourceTemplateOutputPath)\%(RecursiveDir)%(Filename)</Destination>
            </TransformJavaResourceTemplate>
        </ItemGroup>
    </Target>

    <Target Name="TransformJavaResourceTemplates" DependsOnTargets="ResolveTransformJavaResourceTemplates" Inputs="@(TransformJavaResourceTemplate)" Outputs="@(TransformJavaResourceTemplate->'%(Destination)')">
        <MakeDir Directories="$(JavaResourceTemplateOutputPath)" />
        <TransformTemplates Items="@(TransformJavaResourceTemplate)" />
        <ItemGroup>
            <JavaResourceTemplateItem Include="@(TransformJavaResourceTemplate->'%(Destination)')" ResourcePath="%(ResourcePath)" />
            <FileWrites Include="@(TransformJavaResourceTemplate->'%(Destination)')" />
        </ItemGroup>
    </Target>

    <Target Name="_ResolveJavaResourceItems" DependsOnTargets="TransformJavaResourceTemplates">
        <ItemGroup>
            <_JavaResourceItems Include="@(OpenJdkResource)">
                <Key>%(ResourcePath)</Key>
            </_JavaResourceItems>
            <_JavaResourceItems Include="@(JavaResource)" Condition=" '%(JavaResource.TargetFramework)' == '' Or '%(JavaResource.TargetFramework)' == '$(TargetFramework)' ">
                <Key>%(ResourcePath)</Key>
            </_JavaResourceItems>
            <_JavaResourceItems Include="@(JavaResourceTemplateItem)">
                <Key>%(ResourcePath)</Key>
            </_JavaResourceItems>
        </ItemGroup>
        <DistinctSourceItems Source="@(_JavaResourceItems)">
            <Output TaskParameter="Output" ItemName="_JavaResourceItemsDistinct" />
        </DistinctSourceItems>
        <ItemGroup>
            <JavaResourceItems Include="@(_JavaResourceItemsDistinct)" />
        </ItemGroup>
    </Target>

    <PropertyGroup>
        <ResolveJavaResourceItemsDependsOn>
            $(ResolveJavaResourceItemsDependsOn);
            ResolveTransformJavaResourceTemplates;
            TransformJavaResourceTemplates;
            _ResolveJavaResourceItems;
        </ResolveJavaResourceItemsDependsOn>
    </PropertyGroup>

    <Target Name="ResolveJavaResourceItems" DependsOnTargets="$(ResolveJavaResourceItemsDependsOn)">

    </Target>

    <Target Name="ResolveJavaClasspath" DependsOnTargets="BuildRefStubs">
        <ItemGroup>
            <JavaClasspath Include="@(RefStubJar)" />
            <JavaClasspath Include="@(OpenJdkClasspath)" />
        </ItemGroup>
    </Target>

    <Target Name="_BuildJavaClasses" DependsOnTargets="ResolveJavaSourceItems;ResolveJavaClasspath" Inputs="@(JavaSourceItems)" Outputs="$(JavaClassOutputPath)\stamp">
        <Delete Files="$(IntermediateOutputPath)sources.list" />
        <WriteLinesToFile File="$(IntermediateOutputPath)sources.list" Lines="@(JavaSourceItems)" />
        <Delete Files="$(JavaClassOutputPath)\**\*" />
        <RemoveDir Directories="$(JavaClassOutputPath)" />
        <MakeDir Directories="$(JavaClassOutputPath)" />
        <Message Text="javac -J-Xmx1536M -g -nowarn -implicit:none -parameters -cp dummy -bootclasspath @(JavaClasspath) -d $(JavaClassOutputPath) @$(IntermediateOutputPath)sources.list" Importance="high" />
        <Exec Command="javac -J-Xmx1536M -g -nowarn -implicit:none -parameters -cp dummy -bootclasspath @(JavaClasspath) -d $(JavaClassOutputPath) @$(IntermediateOutputPath)sources.list" />
        <Touch Files="$(JavaClassOutputPath)\stamp" AlwaysCreate="true" ForceTouch="true" />
        <ItemGroup>
            <FileWrites Include="$(IntermediateOutputPath)sources.list" />
            <FileWrites Include="$(JavaClassOutputPath)\**\*" />
        </ItemGroup>
    </Target>

    <PropertyGroup>
        <BuildJavaClassesDependsOn>
            $(BuildJavaClassesDependsOn)
            ResolveJavaSourceItems;
            ResolveJavaClasspath;
            _BuildJavaClasses;
        </BuildJavaClassesDependsOn>
    </PropertyGroup>

    <Target Name="BuildJavaClasses" DependsOnTargets="$(BuildJavaClassesDependsOn)">

    </Target>

    <Target Name="BuildRmiStubs" DependsOnTargets="BuildJavaClasses" Inputs="$(JavaClassOutputPath)\stamp" Outputs="$(RmiStubsOutputPath)\stamp">
        <Delete Files="$(RmiStubsOutputPath)\**\*" />
        <RemoveDir Directories="$(RmiStubsOutputPath)" />
        <MakeDir Directories="$(RmiStubsOutputPath)" />

        <PropertyGroup>
            <RmiVmArgs>-J-client -J-Xmx896m -J-Xms128m</RmiVmArgs>
            <RmiArgs>$(RmiVmArgs) -nowarn -bootclasspath @(JavaClasspath);$(JavaClassOutputPath) -d $(RmiStubsOutputPath)</RmiArgs>
        </PropertyGroup>

        <Exec Command="rmic $(RmiArgs) -v1.1 sun.rmi.registry.RegistryImpl" />
        <Exec Command="rmic $(RmiArgs) -v1.1 sun.rmi.transport.DGCImpl" />
        <Exec Command="rmic $(RmiArgs) -v1.2 sun.rmi.server.Activation$ActivationSystemImpl" />
        <Exec Command="rmic $(RmiArgs) -v1.2 java.rmi.activation.ActivationGroup" />
        <Exec Command="rmic $(RmiArgs) -v1.2 com.sun.jndi.rmi.registry.ReferenceWrapper" />
        <Exec Command="rmic $(RmiArgs) -v1.2 javax.management.remote.rmi.RMIConnectionImpl" />
        <Exec Command="rmic $(RmiArgs) -v1.2 -iiop javax.management.remote.rmi.RMIConnectionImpl" />
        <Exec Command="rmic $(RmiArgs) -v1.2 -iiop -standardPackage javax.management.remote.rmi.RMIConnectionImpl" />
        <Exec Command="rmic $(RmiArgs) -v1.2 javax.management.remote.rmi.RMIServerImpl" />
        <Exec Command="rmic $(RmiArgs) -v1.2 -iiop javax.management.remote.rmi.RMIServerImpl" />
        <Exec Command="rmic $(RmiArgs) -v1.2 -iiop -standardPackage javax.management.remote.rmi.RMIServerImpl" />
        <Exec Command="rmic $(RmiArgs) -iiop javax.management.remote.rmi.RMIConnection" />
        <Exec Command="rmic $(RmiArgs) -iiop -standardPackage javax.management.remote.rmi.RMIConnection" />
        <Exec Command="rmic $(RmiArgs) -iiop javax.management.remote.rmi.RMIServer" />
        <Exec Command="rmic $(RmiArgs) -iiop -standardPackage javax.management.remote.rmi.RMIServer" />
        <Touch Files="$(RmiStubsOutputPath)\stamp" AlwaysCreate="true" ForceTouch="true" />

        <ItemGroup>
            <FileWrites Include="$(RmiStubsOutputPath)\**\*" />
        </ItemGroup>
    </Target>

    <Target Name="GetIkvmcExe" DependsOnTargets="ResolveProjectReferences">
        <MSBuild Projects="@(_MSBuildProjectReferenceExistent)" Targets="GetTargetPath" BuildInParallel="$(BuildInParallel)" Properties="%(_MSBuildProjectReferenceExistent.SetConfiguration);%(_MSBuildProjectReferenceExistent.SetPlatform);%(_MSBuildProjectReferenceExistent.SetTargetFramework)" RemoveProperties="%(_MSBuildProjectReferenceExistent.GlobalPropertiesToRemove)$(_GlobalPropertiesToRemoveFromProjectReferences)" Condition=" '%(_MSBuildProjectReferenceExistent.Identity)' == '..\ikvmc\ikvmc.csproj' ">
            <Output TaskParameter="TargetOutputs" ItemName="_Ikvmc" />
        </MSBuild>
        <PropertyGroup>
            <Ikvmc>@(_Ikvmc)</Ikvmc>
        </PropertyGroup>
    </Target>

    <Target Name="GetIkvmRuntimeDll" DependsOnTargets="ResolveProjectReferences">
        <MSBuild Projects="@(_MSBuildProjectReferenceExistent)" Targets="GetTargetPath" BuildInParallel="$(BuildInParallel)" Properties="%(_MSBuildProjectReferenceExistent.SetConfiguration);%(_MSBuildProjectReferenceExistent.SetPlatform);%(_MSBuildProjectReferenceExistent.SetTargetFramework)" RemoveProperties="%(_MSBuildProjectReferenceExistent.GlobalPropertiesToRemove)$(_GlobalPropertiesToRemoveFromProjectReferences)" Condition=" '%(_MSBuildProjectReferenceExistent.Identity)' == '..\IKVM.Runtime-ref\IKVM.Runtime-ref.csproj' ">
            <Output TaskParameter="TargetOutputs" ItemName="_IkvmRuntimeDll" />
        </MSBuild>
        <PropertyGroup>
            <IkvmRuntimeDll>@(_IkvmRuntimeDll)</IkvmRuntimeDll>
        </PropertyGroup>
    </Target>

    <Target Name="ResolveJavaClassItems" DependsOnTargets="BuildJavaClasses;BuildRmiStubs">
        <ItemGroup>
            <JavaClassItems Include="$(JavaClassOutputPath)\**\*.class" />
            <JavaClassItems Include="$(RmiStubsOutputPath)\**\*.class" />
        </ItemGroup>
    </Target>

    <Target Name="_BuildOpenJdkAssembly" DependsOnTargets="GetIkvmcExe;GetIkvmRuntimeDll;ResolveJavaClassItems;ResolveJavaResourceItems;BuildRmiStubs" Inputs="@(JavaClassItems);@(JavaResourceItems);$(IkvmRuntimeDll);$(Ikvmc);@(_ResolveAssemblyReferenceResolvedFiles);$(ResourcesZipPath);map.xml" Outputs="$(OpenJdkAssemblyPath)">
        <!-- this is wrong, determination of which version to use to build needs to be based on which platform we're running on -->
        <PropertyGroup Condition="$(TargetFramework.StartsWith('net4'))">
            <IkvmcExec>$(Ikvmc)</IkvmcExec>
        </PropertyGroup>
        <PropertyGroup Condition="$(TargetFramework.StartsWith('netstandard')) Or $(TargetFramework.StartsWith('netcore'))">
            <IkvmcExec>dotnet exec $(Ikvmc)</IkvmcExec>
        </PropertyGroup>

        <Delete Files="$(IntermediateOutputPath)ikvmc.exclude.txt" />
        <WriteLinesToFile File="$(IntermediateOutputPath)ikvmc.exclude.txt" Lines="@(OpenJdkExcludeRegex)" />

        <ItemGroup>
            <JavaResourceItemsWithJavaSep Include="@(JavaResourceItems)" ResourcePath="$([System.String]::Copy(%(ResourcePath)).Replace('\', '/'))" />
            <IkvmcArgs Include="-debug" Condition=" '$(DebugSymbols)' == 'true' " />
            <IkvmcArgs Include="-assembly:IKVM.OpenJDK" />
            <IkvmcArgs Include="-version:$(AssemblyVersion)" />
            <IkvmcArgs Include="-runtime:$(IkvmRuntimeDll)" />
            <IkvmcArgs Include="-keyfile:$(AssemblyOriginatorKeyFile)" Condition=" '$(SignAssembly)' == 'true' " />
            <IkvmcArgs Include="-remap:map.xml" />
            <IkvmcArgs Include="-compressresources" />
            <IkvmcArgs Include="-opt:fields" />
            <IkvmcArgs Include="-strictfinalfieldsemantics" />
            <IkvmcArgs Include="-removeassertions" />
            <IkvmcArgs Include="-target:library" />
            <IkvmcArgs Include="-sharedclassloader" />
            <IkvmcArgs Include="-nowarn:110" />
            <IkvmcArgs Include="-w4" />
            <IkvmcArgs Include="-noparameterreflection" />
            <IkvmcArgs Include="-exclude:$(IntermediateOutputPath)ikvmc.exclude.txt" />
            <IkvmcArgs Include="@(_ResolveAssemblyReferenceResolvedFiles->'-reference:%(Identity)')" />
            <IkvmcArgs Include="@(JavaResourceItemsWithJavaSep->'-resource:%(ResourcePath)=%(Identity)')" />
            <!--<IkvmcArgs Include="-recurse:$(ResourcesZipPath)\**\*" />-->
            <IkvmcArgs Include="@(JavaClassItems)" />
        </ItemGroup>

        <Delete Files="$(IntermediateOutputPath)ikvmc.args.txt" />
        <WriteLinesToFile File="$(IntermediateOutputPath)ikvmc.args.txt" Lines="@(IkvmcArgs)" />
        <Exec Command="$(IkvmcExec) -out:$(OpenJdkAssemblyPath).tmp @$(IntermediateOutputPath)ikvmc.args.txt" />
        <Delete Files="$(OpenJdkAssemblyPath)" />
        <Move SourceFiles="$(OpenJdkAssemblyPath).tmp" DestinationFiles="$(OpenJdkAssemblyPath)" OverwriteReadOnlyFiles="true" />

        <ItemGroup>
            <CustomAdditionalCompileInputs Include="$(OpenJdkAssemblyPath)" />
            <FileWrites Include="$(IntermediateOutputPath)ikvmc.args.txt" />
            <FileWrites Include="$(IntermediateOutputPath)ikvmc.exclude.txt" />
            <FileWrites Include="$(OpenJdkAssemblyPath).tmp" />
            <FileWrites Include="$(OpenJdkAssemblyPath)" />
        </ItemGroup>
    </Target>

    <PropertyGroup>
        <BuildOpenJdkAssemblyDependsOn>
            $(BuildOpenJdkAssemblyDependsOn);
            GetIkvmcExe;
            GetIkvmRuntimeDll;
            ResolveJavaClassItems;
            ResolveJavaResourceItems;
            BuildRmiStubs;
            _BuildOpenJdkAssembly;
        </BuildOpenJdkAssemblyDependsOn>
    </PropertyGroup>

    <Target Name="BuildOpenJdkAssembly" DependsOnTargets="$(BuildOpenJdkAssemblyDependsOn)">

    </Target>

    <Target Name="_MergeOpenJdkAssembly" DependsOnTargets="BuildOpenJdkAssembly">
        <ItemGroup>
            <ILMergeReferences Include="@(ReferencePath)" />
            <ILMergeReferencePaths Include="$([System.String]::Copy(%(ILMergeReferences.RelativeDir)).TrimEnd('\'))" />
        </ItemGroup>

        <RemoveDuplicates Inputs="@(ILMergeReferencePaths)">
            <Output TaskParameter="Filtered" ItemName="ILMergeFilteredLibraryPaths" />
        </RemoveDuplicates>

        <MakeDir Directories="$(IntermediateOutputPath)merge" />
        <ILRepack DebugInfo="true" AllowDuplicateResources="false" InputAssemblies="$(IntermediateOutputPath)$(TargetName)$(TargetExt);$(OpenJdkAssemblyPath)" TargetKind="SameAsPrimaryAssembly" LibraryPath="@(ILMergeFilteredLibraryPaths)" OutputFile="$(IntermediateOutputPath)merge\$(TargetName)$(TargetExt)" KeyFile="$(AssemblyOriginatorKeyFile)" Verbose="true" Condition=" '$(SignAssembly)' == 'true' " />
        <ILRepack DebugInfo="true" AllowDuplicateResources="false" InputAssemblies="$(IntermediateOutputPath)$(TargetName)$(TargetExt);$(OpenJdkAssemblyPath)" TargetKind="SameAsPrimaryAssembly" LibraryPath="@(ILMergeFilteredLibraryPaths)" OutputFile="$(IntermediateOutputPath)merge\$(TargetName)$(TargetExt)" Verbose="true" Condition=" '$(SignAssembly)' != 'true' " />
        <Delete Files="$(IntermediateOutputPath)$(TargetName)$(TargetExt)" />
        <Move SourceFiles="$(IntermediateOutputPath)merge\$(TargetName)$(TargetExt)" DestinationFiles="$(IntermediateOutputPath)$(TargetName)$(TargetExt)" OverwriteReadOnlyFiles="true" />
        <Delete Files="$(IntermediateOutputPath)$(TargetName).pdb" />
        <Move SourceFiles="$(IntermediateOutputPath)merge\$(TargetName).pdb" DestinationFiles="$(IntermediateOutputPath)$(TargetName).pdb" OverwriteReadOnlyFiles="true" />

        <ItemGroup>
            <FileWrites Include="$(IntermediateOutputPath)merge\$(TargetName)$(TargetExt)" />
            <FileWrites Include="$(IntermediateOutputPath)merge\$(TargetName).pdb" />
        </ItemGroup>
    </Target>

    <Target Name="ILRepack">
        <!-- disable -->
    </Target>

    <PropertyGroup>
        <MergeOpenJdkAssemblyDependsOn>
            $(MergeOpenJdkAssemblyDependsOn);
            BuildOpenJdkAssembly;
            _MergeOpenJdkAssembly;
        </MergeOpenJdkAssemblyDependsOn>
    </PropertyGroup>

    <Target Name="MergeOpenJdkAssembly" DependsOnTargets="$(MergeOpenJdkAssemblyDependsOn)">

    </Target>

</Project>
