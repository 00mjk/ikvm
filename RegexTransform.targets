<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
<!--
============================================================
            RegexTransform
 
Transforms the input Items parameter by evaluating the
regular expression in their Find metadata and
replacing with their ReplaceWith metadata. Optional, the
options for the regular expression evaluation can be specified.
 
Example input item:
        <RegexTransform Include="$(BuildRoot)Src\GlobalAssemblyInfo.cs">
            <Find>AssemblyFileVersion\(".*?"\)</Find>
            <ReplaceWith>AssemblyFileVersion("$(FileVersion)")</ReplaceWith>
            <Options>Multiline | IgnorePatternWhitespace</Options>
        </RegexTransform>
 
Invoking the target:
    <RegexTransform Items="@(RegexTransform)" />

Reference: http://blogs.clariusconsulting.net/kzu/how-to-perform-regular-expression-based-replacements-on-files-with-msbuild/
============================================================
-->
<UsingTask TaskName="RegexTransform"
        TaskFactory="CodeTaskFactory"
        AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
        <Items ParameterType="Microsoft.Build.Framework.ITaskItem[]" />
    </ParameterGroup>
    <Task>
        <Using Namespace="System.IO" />
        <Using Namespace="System.Text.RegularExpressions" />
        <Using Namespace="Microsoft.Build.Framework" />
        <Code Type="Fragment"
            Language="cs">
            <![CDATA[
    foreach(var item in Items)
    {
        string fileName = item.GetMetadata("FullPath");
        string find = item.GetMetadata("Find");
        string replaceWith = item.GetMetadata("ReplaceWith");
        string optionsValue = item.GetMetadata("Options") ?? "";

        var options = string.IsNullOrWhiteSpace(optionsValue) ?
            RegexOptions.None : (RegexOptions)Enum.Parse(typeof(RegexOptions), optionsValue.Replace('|', ','));

        if(!File.Exists(fileName))
        {
        Log.LogError("Could not find file: {0}", fileName);
        return false;
        }
        string content = File.ReadAllText(fileName);
        File.WriteAllText(
        fileName,
        Regex.Replace(
            content,
            find,
            replaceWith,
            options
        )
        );
    }
    ]]>
        </Code>
    </Task>
</UsingTask>
</Project>