<Project>
    <Import Project="$(MSBuildThisFileDirectory)..\IKVM.NET.Sdk\Sdk\Sdk.props" />
    <Import Project="$(MSBuildThisFileDirectory)..\..\openjdk.props" />

    <PropertyGroup>
        <PackageId>IKVM.Java</PackageId>
        <TargetFrameworks>net461;netcoreapp3.1</TargetFrameworks>
        <AssemblyName>IKVM.Java</AssemblyName>
        <AssemblyTitle>IKVM.NET Java Standard Edition 8 Platform</AssemblyTitle>
        <Description>IKVM.NET Java Standard Edition 8 Platform</Description>
        <TransformOnBuild>true</TransformOnBuild>
        <Bootstrap>true</Bootstrap>
        <UseIkvmTasks>false</UseIkvmTasks>
        <DisableImplicitIkvmPackageReference>true</DisableImplicitIkvmPackageReference>
        <DisableImplicitIkvmMSBuildPackageReference>true</DisableImplicitIkvmMSBuildPackageReference>
    </PropertyGroup>

    <ItemGroup>
        <InternalsVisibleTo Include="IKVM.Runtime" />
        <InternalsVisibleTo Include="IKVM.Runtime.JNI" />
        <InternalsVisibleTo Include="IKVM.AWT.WinForms" />
    </ItemGroup>

    <ItemGroup>
        <PackageReference Include="SharpZipLib" Version="1.3.3" />
        <PackageReference Include="System.Memory" Version="4.5.5" />
    </ItemGroup>

    <ItemGroup Condition=" '$(TargetFramework)' == 'net461' ">
        <Reference Include="System.Configuration" />
        <Reference Include="System.IO.Compression" />
        <Reference Include="System.Security" />
    </ItemGroup>

    <ItemGroup Condition=" '$(TargetFramework)' == 'netcoreapp3.1' ">
        <PackageReference Include="Microsoft.Extensions.DependencyModel" Version="6.0.0" />
        <PackageReference Include="Microsoft.Win32.Registry" Version="5.0.0" />
        <PackageReference Include="System.Configuration.ConfigurationManager" Version="6.0.0" />
        <PackageReference Include="System.Drawing.Common" Version="6.0.0" />
        <PackageReference Include="System.Data.Odbc" Version="6.0.0" />
        <PackageReference Include="System.IO.Compression" Version="4.3.0" />
        <PackageReference Include="System.IO.FileSystem.AccessControl" Version="5.0.0" />
        <PackageReference Include="System.Runtime" Version="4.3.1" />
        <PackageReference Include="System.Runtime.InteropServices" Version="4.3.0" />
        <PackageReference Include="System.Runtime.Loader" Version="4.3.0" />
        <PackageReference Include="System.Security.Cryptography.Pkcs" Version="6.0.1" />
        <PackageReference Include="System.Security.AccessControl" Version="6.0.0" />
        <PackageReference Include="System.Security.Permissions" Version="6.0.0" />
        <PackageReference Include="System.Security.Principal.Windows" Version="5.0.0" />
        <PackageReference Include="System.Threading.AccessControl" Version="6.0.0" />
    </ItemGroup>

    <Choose>
        <!-- This is a major limitation which prevents building on Linux.
             The version of the tool that is executed should be that of the current MSBuild platform, not that being targeted.
             However, at present Frameworks builds of IKVM cannot generate Core version assemblies. -->
        <When Condition=" '$(TargetFramework)' == 'netcoreapp3.1' ">
            <PropertyGroup>
                <_IkvmToolTargetFramework>netcoreapp3.1</_IkvmToolTargetFramework>
                <_IkvmToolExecPrefix>dotnet exec </_IkvmToolExecPrefix>
            </PropertyGroup>
        </When>
        <When Condition=" '$(TargetFramework)' == 'net461' ">
            <PropertyGroup>
                <_IkvmToolTargetFramework>net461</_IkvmToolTargetFramework>
                <_IkvmToolExecPrefix></_IkvmToolExecPrefix>
            </PropertyGroup>
        </When>
    </Choose>

    <ItemGroup>
        <ProjectReference Include="..\IKVM.Runtime-ref\IKVM.Runtime-ref.csproj">
            <PrivateAssets>All</PrivateAssets>
            <Private>False</Private>
            <IsIkvmRuntimeAssembly>true</IsIkvmRuntimeAssembly>
        </ProjectReference>
        <ProjectReference Include="..\ikvmc\ikvmc.csproj" Condition=" '$(_IkvmToolTargetFramework)' != '' ">
            <PrivateAssets>All</PrivateAssets>
            <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
            <Private>False</Private>
            <IsIkvmCompiler>true</IsIkvmCompiler>
            <SetTargetFramework>TargetFramework=$(_IkvmToolTargetFramework)</SetTargetFramework>
        </ProjectReference>
        <ProjectReference Include="..\ikvmstub\ikvmstub.csproj" Condition=" '$(_IkvmToolTargetFramework)' != '' ">
            <PrivateAssets>All</PrivateAssets>
            <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
            <Private>False</Private>
            <IsIkvmStub>true</IsIkvmStub>
            <SetTargetFramework>TargetFramework=$(_IkvmToolTargetFramework)</SetTargetFramework>
        </ProjectReference>
    </ItemGroup>

    <ItemGroup>
        <T4ParameterValues Include="OpenJdkImplementationVersion">
            <Value>$(OpenJdkImplementationVersion)</Value>
            <Visible>False</Visible>
        </T4ParameterValues>
        <T4ParameterValues Include="OpenJdkSpecificationVersion">
            <Value>$(OpenJdkSpecificationVersion)</Value>
            <Visible>False</Visible>
        </T4ParameterValues>
        <T4ParameterValues Include="OpenJdkFullVersion">
            <Value>$(OpenJdkFullVersion)</Value>
            <Visible>False</Visible>
        </T4ParameterValues>
        <T4ParameterValues Include="OpenJdkVersion">
            <Value>$(OpenJdkVersion)</Value>
            <Visible>False</Visible>
        </T4ParameterValues>
        <T4ParameterValues Include="Version">
            <Value>$(Version)</Value>
            <Visible>False</Visible>
        </T4ParameterValues>
        <T4ParameterValues Include="FileVersion">
            <Value>$(FileVersion)</Value>
            <Visible>False</Visible>
        </T4ParameterValues>
    </ItemGroup>

    <ItemGroup>
        <JavaResource Include="local\**\*" Exclude="local\**\*.java;**\*.tt" ResourcePath="%(RecursiveDir)%(Filename)%(Extension)" />
    </ItemGroup>

    <ItemGroup>
        <Compile Include="@(OpenJdkSource)" LinkBase="openjdk" />
        <JavaResource Include="@(OpenJdkResource)" LinkBase="openjdk" />
        <ExcludeRegex Include="@(OpenJdkExcludeRegex)" />
    </ItemGroup>

    <ItemGroup>
        <None Include="local\java\lang\PropertyConstants.java.tt">
            <Generator>TextTemplatingFileGenerator</Generator>
            <OutputFileName>PropertyConstants.java</OutputFileName>
        </None>
        <Compile Update="local\java\lang\PropertyConstants.java">
            <AutoGen>True</AutoGen>
            <DependentUpon>PropertyConstants.java.tt</DependentUpon>
        </Compile>
    </ItemGroup>

    <ItemGroup>
        <None Include="local\META-INF\MANIFEST.MF.tt">
            <Generator>TextTemplatingFileGenerator</Generator>
            <OutputFileName>MANIFEST.MF</OutputFileName>
        </None>
        <JavaResource Update="local\META-INF\MANIFEST.MF">
            <AutoGen>True</AutoGen>
            <DependentUpon>MANIFEST.MF.tt</DependentUpon>
            <ResourcePath>META-INF\MANIFEST.MF</ResourcePath>
        </JavaResource>
    </ItemGroup>

    <ItemGroup>
        <None Include="local\nashorn\version.properties.tt">
            <Generator>TextTemplatingFileGenerator</Generator>
            <OutputFileName>version.properties</OutputFileName>
        </None>
        <JavaResource Update="local\nashorn\version.properties">
            <AutoGen>True</AutoGen>
            <DependentUpon>version.properties.tt</DependentUpon>
            <ResourcePath>nashorn/version.properties</ResourcePath>
        </JavaResource>
    </ItemGroup>

    <ItemGroup>
        <MapFile Include="map.xml" />
    </ItemGroup>

    <Import Project="$(MSBuildThisFileDirectory)..\IKVM.NET.Sdk\Sdk\Sdk.targets" />
    <Import Project="$(MSBuildExtensionsPath)\Microsoft\VisualStudio\v$(VisualStudioVersion)\TextTemplating\Microsoft.TextTemplating.targets" Condition="Exists('$(MSBuildExtensionsPath)\Microsoft\VisualStudio\v$(VisualStudioVersion)\TextTemplating\Microsoft.TextTemplating.targets')" />

    <Target Name="ResolveIkvmCompiler" DependsOnTargets="ResolveProjectReferences">
        <MSBuild Projects="@(_MSBuildProjectReferenceExistent)" Targets="Build" BuildInParallel="$(BuildInParallel)" Properties="%(_MSBuildProjectReferenceExistent.SetConfiguration);%(_MSBuildProjectReferenceExistent.SetPlatform);%(_MSBuildProjectReferenceExistent.SetTargetFramework)" RemoveProperties="%(_MSBuildProjectReferenceExistent.GlobalPropertiesToRemove)$(_GlobalPropertiesToRemoveFromProjectReferences)" Condition=" '%(_MSBuildProjectReferenceExistent.IsIkvmCompiler)' == 'true' ">
            <Output TaskParameter="TargetOutputs" ItemName="_IkvmCompilerPath" />
        </MSBuild>
        <PropertyGroup>
            <IkvmCompilerPath>@(_IkvmCompilerPath)</IkvmCompilerPath>
            <IkvmCompilerExec>$(_IkvmToolExecPrefix)$(IkvmCompilerPath)</IkvmCompilerExec>
        </PropertyGroup>
        <Message Text="Using ikvmc executable at '$(IkvmCompilerPath)'." Importance="high" />
    </Target>

    <Target Name="ResolveIkvmAssemblies" DependsOnTargets="ResolveProjectReferences">
        <MSBuild Projects="@(_MSBuildProjectReferenceExistent)" Targets="Build" BuildInParallel="$(BuildInParallel)" Properties="%(_MSBuildProjectReferenceExistent.SetConfiguration);%(_MSBuildProjectReferenceExistent.SetPlatform);%(_MSBuildProjectReferenceExistent.SetTargetFramework)" RemoveProperties="%(_MSBuildProjectReferenceExistent.GlobalPropertiesToRemove)$(_GlobalPropertiesToRemoveFromProjectReferences)" Condition=" '%(_MSBuildProjectReferenceExistent.IsIkvmRuntimeAssembly)' == 'true' ">
            <Output TaskParameter="TargetOutputs" ItemName="_IkvmRuntimeAssembly" />
        </MSBuild>
        <PropertyGroup>
            <IkvmRuntimeAssembly>@(_IkvmRuntimeAssembly)</IkvmRuntimeAssembly>
        </PropertyGroup>
        <Message Text="Using IKVM.Runtime at '$(IkvmRuntimeAssembly)'." Importance="high" />
    </Target>

    <Target Name="ResolveIkvmStub" DependsOnTargets="ResolveProjectReferences">
        <MSBuild Projects="@(_MSBuildProjectReferenceExistent)" Targets="Build" BuildInParallel="$(BuildInParallel)" Properties="%(_MSBuildProjectReferenceExistent.SetConfiguration);%(_MSBuildProjectReferenceExistent.SetPlatform);%(_MSBuildProjectReferenceExistent.SetTargetFramework)" RemoveProperties="%(_MSBuildProjectReferenceExistent.GlobalPropertiesToRemove)$(_GlobalPropertiesToRemoveFromProjectReferences)" Condition=" '%(_MSBuildProjectReferenceExistent.IsIkvmStub)' == 'true' ">
            <Output TaskParameter="TargetOutputs" ItemName="_IkvmStubPath" />
        </MSBuild>
        <PropertyGroup>
            <IkvmStubPath>@(_IkvmStubPath)</IkvmStubPath>
            <IkvmStubExec>$(_IkvmToolExecPrefix)$(IkvmStubPath)</IkvmStubExec>
        </PropertyGroup>
        <Message Text="Using ikvmstub executable at '$(IkvmStubPath)'." Importance="high" />
    </Target>

    <!-- Override IKVM.NET.Sdk: directly invoke executable  -->
    <Target Name="_BuildReferenceStubs" DependsOnTargets="ResolveIkvmStub;ResolveReferenceStubs" Inputs="%(ReferenceStub.AssemblyFile)" Outputs="%(ReferenceStub.Identity)">
        <Error Text="ikvmstub could not be located at '$(IkvmStubPath)'" Condition="!Exists('$(IkvmStubPath)')" />

        <ItemGroup>
            <_IkvmStubArgs Include="-bootstrap" Condition=" '$(Bootstrap)' == 'true' " />
            <_IkvmStubArgs Include="@(ReferencePathWithRefAssemblies->'-r:&quot;%(FullPath)&quot;')"  Condition=" '%(Filename)' != '%(ReferenceStub.Filename)' "/>
            <_IkvmStubArgs Include="-nostdlib" Condition=" '$(NoCompilerStandardLib)' == 'true' " />
            <_IkvmStubArgs Include="-out:&quot;$(ReferenceStubOutputPath)tmp\%(ReferenceStub.Filename)%(ReferenceStub.Extension)&quot;" />
            <_IkvmStubArgs Include="&quot;%(ReferenceStub.AssemblyFile)&quot;" />
        </ItemGroup>

        <MakeDir Directories="$(ReferenceStubOutputPath);$(ReferenceStubOutputPath)tmp" />
        <Message Text="$(IkvmStubExec) @(_IkvmStubArgs, ' ')" Importance="low" />
        <Exec Command="$(IkvmStubExec) @(_IkvmStubArgs, ' ')" />
        <Move SourceFiles="$(ReferenceStubOutputPath)tmp\%(ReferenceStub.Filename)%(ReferenceStub.Extension)" DestinationFiles="%(ReferenceStub.Identity)" />
        <Delete Files="$(ReferenceStubOutputPath)tmp\%(ReferenceStub.Filename)%(ReferenceStub.Extension)" />

        <ItemGroup>
            <FileWrites Include="$(ReferenceStubOutputPath)tmp\%(ReferenceStub.Filename)%(ReferenceStub.Extension)" />
        </ItemGroup>
    </Target>

    <Target Name="ResolveJavaCompilerPath">
        <PropertyGroup>
            <JavaCompilerPath>javac</JavaCompilerPath>
            <JavaCompilerArgs>-J-Xmx1536M</JavaCompilerArgs>
            <JavaCompilerExec>$(JavaCompilerPath) $(JavaCompilerArgs)</JavaCompilerExec>
        </PropertyGroup>
    </Target>

    <!-- Override IKVM.NET.Sdk: directly invoke executable  -->
    <Target Name="_CompileJava" DependsOnTargets="ResolveJavaCompilerPath;BuildReferenceStubs" Inputs="@(Compile);@(Classpath)" Outputs="$(_CompileJavaStampFile)">
        <ItemGroup>
            <_JavaCompilerArgs Include="-g" Condition=" '$(DebugSymbols)' == 'true' Or '$(DebugType)' != 'none' " />
            <_JavaCompilerArgs Include="-nowarn" />
            <_JavaCompilerArgs Include="-implicit:none" />
            <_JavaCompilerArgs Include="-parameters" />
            <_JavaCompilerArgs Include="-cp" />
            <_JavaCompilerArgs Include="null" />
            <_JavaCompilerArgs Include="-bootclasspath" Condition=" '@(Classpath)' != '' "/>
            <_JavaCompilerArgs Include="@(Classpath, '$([System.IO.Path]::PathSeparator)')" Condition=" '@(Classpath)' != '' " />
            <_JavaCompilerArgs Include="-source" />
            <_JavaCompilerArgs Include="$(LangVersion)" />
            <_JavaCompilerArgs Include="-target" />
            <_JavaCompilerArgs Include="$(JavaVersion)" />
            <_JavaCompilerArgs Include="-d" />
            <_JavaCompilerArgs Include="$([System.IO.Path]::GetFullPath('$(ClassOutputPath)'))" />
            <_JavaCompilerArgs Include="@(Compile->'%(FullPath)')" />
        </ItemGroup>
        <WriteLinesToFile File="$(_CompileJavaResponseFile)" Lines="@(_JavaCompilerArgs)" Overwrite="true" />

        <RemoveDir Directories="$(ClassOutputPath)" />
        <MakeDir Directories="$(ClassOutputPath)" />
        <Message Text="$(JavaCompilerExec) @(_JavaCompilerArgs, ' ')" Importance="low" />
        <Exec Command="$(JavaCompilerExec) @$(_CompileJavaResponseFile)" />

        <Touch Files="$(_CompileJavaStampFile)" AlwaysCreate="true" ForceTouch="true" />
        <ItemGroup>
            <FileWrites Include="$(_CompileJavaResponseFile)" />
        </ItemGroup>
    </Target>

    <!-- Override IKVM.NET.Sdk: directly invoke executable  -->
    <Target Name="_CoreCompile" DependsOnTargets="ResolveIkvmAssemblies;ResolveIkvmCompiler;CompileJava" Inputs="$(IkvmRuntimeDll);$(KeyOriginatorFile);@(MapFile);@(ReferencePathWithRefAssemblies);@(Class);@(JavaResource);$(_CompileJavaStampFile)" Outputs="@(IntermediateAssembly);@(_DebugSymbolsIntermediatePath)">
        <Error Text="IKVM.Runtime.dll could not be located at '$(IkvmRuntimeAssembly)'" Condition="!Exists('$(IkvmRuntimeAssembly)')" />
        <Error Text="ikvmc could not be located at '$(IkvmCompilerPath)'" Condition="!Exists('$(IkvmCompilerPath)')" />

        <WriteLinesToFile File="$(_ExcludeFilePath)" Lines="@(ExcludeRegex)" Overwrite="true" Condition=" '@(ExcludeRegex)' != '' " />

        <ItemGroup>
            <_ClassToCompile Include="@(Class)" />
            <_AssemblyAttributesClass Include="@(_ClassToCompile)" Condition=" '%(Filename)%(Extension)' == '__AssemblyAttributes.class' " />
            <_AssemblyAttributesClass Include="@(_ClassToCompile)" Condition=" '%(Filename)%(Extension)' == '__AssemblyInfo.class' " />
            <_ClassToCompile Remove="@(_AssemblyAttributesClass)" />
        </ItemGroup>

        <ItemGroup>
            <_IkvmCompilerArgs Include="-debug" Condition=" '$(DebugType)' != 'none' " />
            <_IkvmCompilerArgs Include="-assembly:$(AssemblyName)" />
            <_IkvmCompilerArgs Include="-version:$(AssemblyVersion)" />
            <_IkvmCompilerArgs Include="-runtime:$(IkvmRuntimeAssembly)" />
            <_IkvmCompilerArgs Include="-keyfile:$(KeyOriginatorFile)" Condition=" '$(KeyOriginatorFile)' != '' " />
            <_IkvmCompilerArgs Include="@(MapFile->'-remap:%(FullPath)')" Condition=" '@(MapFile)' != '' " />
            <_IkvmCompilerArgs Include="-compressresources" Condition=" '$(CompressResources)' == 'true' " />
            <_IkvmCompilerArgs Include="-opt:fields" />
            <_IkvmCompilerArgs Include="-strictfinalfieldsemantics" Condition=" '$(StrictFinalFieldSemantics)' == 'true' " />
            <_IkvmCompilerArgs Include="-removeassertions" Condition=" '$(RemoveAssertions)' == 'true' " />
            <_IkvmCompilerArgs Include="-target:$(OutputType.ToLowerInvariant())" />
            <_IkvmCompilerArgs Include="-nostdlib" Condition=" '$(NoCompilerStandardLib)' == 'true' " />
            <_IkvmCompilerArgs Include="-sharedclassloader" Condition=" '$(SharedClassLoader)' == 'true' " />
            <_IkvmCompilerArgs Include="-w$(WarningLevel)" />
            <_IkvmCompilerArgs Include="-noparameterreflection" Condition=" '$(NoParameterReflection)' == 'true' " />
            <_IkvmCompilerArgs Include="-exclude:$([System.IO.Path]::GetFullPath('$(_ExcludeFilePath)'))" Condition="Exists('$(_ExcludeFilePath)')" />
            <_IkvmCompilerArgs Include="@(_AssemblyAttributesClass->'-assemblyattributes:%(FullPath)')" />
            <_IkvmCompilerReferencePath Include="@(ReferencePathWithRefAssemblies)" />
            <_IkvmCompilerArgs Include="@(_IkvmCompilerReferencePath->'-reference:%(FullPath)')" />
            <_IkvmCompilerResourceItem Include="@(JavaResource)" ResourcePath="$([System.String]::new('%(JavaResource.ResourcePath)').Replace('\', '/'))" Condition=" '%(Identity)' != '' " />
            <_IkvmCompilerArgs Include="@(_IkvmCompilerResourceItem->'-resource:%(ResourcePath)=%(FullPath)')" />
            <_IkvmCompilerArgs Include="-out:$(_AssemblyTempPath)$(TargetName)$(TargetExt)" />
            <_IkvmCompilerArgs Include="@(_ClassToCompile->'%(FullPath)')" />
        </ItemGroup>
        <WriteLinesToFile File="$(_IkvmCompilerResponseFile)" Lines="@(_IkvmCompilerArgs)" Overwrite="true" />

        <!-- Build Java assembly into temporary directory. -->
        <RemoveDir Directories="$(_AssemblyTempPath)" />
        <MakeDir Directories="$(_AssemblyTempPath)" />
        <Exec Command="$(IkvmCompilerExec) @$(_IkvmCompilerResponseFile)" />

        <!-- Move temporary files in place of permanent files. -->
        <Move SourceFiles="$(_AssemblyTempPath)$(TargetName)$(TargetExt)" DestinationFiles="@(IntermediateAssembly)" OverwriteReadOnlyFiles="true" />
        <Move SourceFiles="$(_AssemblyTempPath)$(TargetName).pdb" DestinationFiles="@(_DebugSymbolsIntermediatePath)" OverwriteReadOnlyFiles="true" Condition="Exists('$(_AssemblyTempPath)$(TargetName).pdb')" />

        <ItemGroup>
            <FileWrites Include="$(_ExcludeFilePath)" />
            <FileWrites Include="$(_IkvmCompilerResponseFile)" />
            <FileWrites Include="$(_AssemblyTempPath)$(TargetName)$(TargetExt)" />
            <FileWrites Include="$(_AssemblyTempPath)$(TargetName).pdb" />
        </ItemGroup>
    </Target>

    <Target Name="ResolveRmiStubInputItems" DependsOnTargets="CompileJava">
        <ItemGroup>
            <RmiStubInputItem Include="@(Classpath)" />
            <RmiStubInputItem Include="$(ClassOutputPath)**\*.class" />
        </ItemGroup>
    </Target>

    <Target Name="GetRmicExe">
        <PropertyGroup>
            <Rmic>rmic</Rmic>
        </PropertyGroup>
    </Target>

    <PropertyGroup>
        <RmiStubsOutputPath>$(IntermediateOutputPath)rmistubs\</RmiStubsOutputPath>
    </PropertyGroup>

    <Target Name="_BuildRmiStubs" DependsOnTargets="GetRmicExe;ResolveRmiStubInputItems" Inputs="@(RmiStubInputItem)" Outputs="$(_BuildRmiStubsCoreStampFile)">
        <ItemGroup>
            <_RmicClasspath Include="@(Classpath);$(ClassOutputPath)" />
            <_RmicArgs Include="-J-client" />
            <_RmicArgs Include="-J-Xms128m" />
            <_RmicArgs Include="-nowarn" />
            <_RmicArgs Include="-bootclasspath" />
            <_RmicArgs Include="@(_RmicClasspath, '$([System.IO.Path]::PathSeparator)')" />
            <_RmicArgs Include="-d" />
            <_RmicArgs Include="$(RmiStubsOutputPath)" />
        </ItemGroup>
        <PropertyGroup>
            <_RmicArgs>@(_RmicArgs, ' ')</_RmicArgs>
        </PropertyGroup>
        <Delete Files="$(RmiStubsOutputPath)**\*" />
        <MakeDir Directories="$(RmiStubsOutputPath)" />
        <Exec Command="$(Rmic) $(_RmicArgs) %(OpenJdkRmiStub.Flags) %(OpenJdkRmiStub.Identity)" />
        <Touch Files="$(_BuildRmiStubsCoreStampFile)" AlwaysCreate="true" ForceTouch="true" />
    </Target>

    <PropertyGroup>
        <BuildRmiStubsDependsOn>
            $(BuildRmiStubsDependsOn)
            CompileJava;
            ResolveRmiStubInputItems;
            _BuildRmiStubs;
        </BuildRmiStubsDependsOn>
    </PropertyGroup>

    <Target Name="BuildRmiStubs" DependsOnTargets="$(BuildRmiStubsDependsOn)">
        <ItemGroup>
            <Class Include="$(RmiStubsOutputPath)**\*.class" />
        </ItemGroup>
    </Target>

    <Target Name="CleanRmiStubs">
        <Delete Files="$(_BuildRmiStubsCoreStampFile)" />
        <RemoveDir Directories="$(RmiStubsOutputPath)" />
    </Target>

    <PropertyGroup>
        <CleanDependsOn>
            $(CleanDependsOn);
            CleanRmiStubs;
        </CleanDependsOn>
    </PropertyGroup>

    <PropertyGroup>
        <CoreCompileDependsOn>
            BuildRmiStubs;
            $(CoreCompileDependsOn);
        </CoreCompileDependsOn>
    </PropertyGroup>

</Project>
