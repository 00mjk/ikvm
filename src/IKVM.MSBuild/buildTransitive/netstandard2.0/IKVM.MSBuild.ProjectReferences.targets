<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <PropertyGroup>
        <MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildThisFileFullPath)</MSBuildAllProjects>
    </PropertyGroup>

    <!--
    This file contains targets which resolve various items by ProjectReference.
    -->

    <PropertyGroup>
        <ResolveJavaCompilerDependsOn>
            $(ResolveJavaCompilerDependsOn);
            ResolveProjectReferences;
        </ResolveJavaCompilerDependsOn>
    </PropertyGroup>

    <!-- Resolve JavaCompiler from project marked with IsJavaCompiler. -->
    <Target Name="ResolveJavaCompiler" DependsOnTargets="$(ResolveJavaCompilerDependsOn)">
        <MSBuild Projects="@(_MSBuildProjectReferenceExistent)" Targets="Publish" BuildInParallel="$(BuildInParallel)" Properties="%(_MSBuildProjectReferenceExistent.SetConfiguration);%(_MSBuildProjectReferenceExistent.SetPlatform);%(_MSBuildProjectReferenceExistent.SetTargetFramework);PublishDir=$([System.IO.Path]::GetFullPath('$(IntermediateOutputPath)javac'))" RemoveProperties="%(_MSBuildProjectReferenceExistent.GlobalPropertiesToRemove)$(_GlobalPropertiesToRemoveFromProjectReferences);PublishUrl;Location" Condition=" '%(_MSBuildProjectReferenceExistent.IsJavaCompiler)' == 'true' " />
        <PropertyGroup>
            <JavaCompilerPath Condition=" '$(JavaCompilerPath)' == '' And Exists('$(IntermediateOutputPath)javac\javac.exe') ">$(IntermediateOutputPath)javac\javac.exe</JavaCompilerPath>
            <JavaCompilerExec Condition=" '$(JavaCompilerExec)' == '' ">$(JavaCompilerPath)</JavaCompilerExec>
        </PropertyGroup>
        <Message Text="Resolved javac executable from project at '$(JavaCompilerPath)'." Importance="high" Condition=" '@(_JavaCompilerPath)' != '' " />
    </Target>

    <PropertyGroup>
        <ResolveIkvmCompilerDependsOn>
            $(ResolveIkvmCompilerDependsOn);
            ResolveProjectReferences;
        </ResolveIkvmCompilerDependsOn>
    </PropertyGroup>

    <PropertyGroup>
        <ResolveIkvmCompilerDependsOn>
            $(ResolveIkvmCompilerDependsOn);
            ResolveProjectReferences;
        </ResolveIkvmCompilerDependsOn>
    </PropertyGroup>

    <!-- Resolve IkvmCompiler from project marked with IsIkvmCompiler. -->
    <Target Name="ResolveIkvmCompiler" DependsOnTargets="$(ResolveIkvmCompilerDependsOn)">
        <MSBuild Projects="@(_MSBuildProjectReferenceExistent)" Targets="Publish" BuildInParallel="$(BuildInParallel)" Properties="%(_MSBuildProjectReferenceExistent.SetConfiguration);%(_MSBuildProjectReferenceExistent.SetPlatform);%(_MSBuildProjectReferenceExistent.SetTargetFramework);PublishDir=$([System.IO.Path]::GetFullPath('$(IntermediateOutputPath)ikvmc'))" RemoveProperties="%(_MSBuildProjectReferenceExistent.GlobalPropertiesToRemove)$(_GlobalPropertiesToRemoveFromProjectReferences);PublishUrl;Location" Condition=" '%(_MSBuildProjectReferenceExistent.IsIkvmCompiler)' == 'true' " />
        <PropertyGroup>
            <IkvmCompilerPath Condition=" '$(IkvmCompilerPath)' == '' And Exists('$(IntermediateOutputPath)ikvmc\ikvmc.exe') ">$(IntermediateOutputPath)ikvmc\ikvmc.exe</IkvmCompilerPath>
            <IkvmCompilerExec Condition=" '$(IkvmCompilerExec)' == '' ">$(IkvmCompilerPath)</IkvmCompilerExec>
        </PropertyGroup>
        <Message Text="Using ikvmc executable from project at '$(IkvmCompilerPath)'." Importance="high" Condition=" '$(IkvmCompilerPath)' != '' " />
    </Target>

    <PropertyGroup>
        <ResolveIkvmExporterDependsOn>
            $(ResolveIkvmExporterDependsOn);
            ResolveProjectReferences;
        </ResolveIkvmExporterDependsOn>
    </PropertyGroup>

    <!-- Resolve IkvmExporter from project marked with IsIkvmExporter. -->
    <Target Name="ResolveIkvmExporter" DependsOnTargets="$(ResolveIkvmExporterDependsOn)">
        <MSBuild Projects="@(_MSBuildProjectReferenceExistent)" Targets="Publish" BuildInParallel="$(BuildInParallel)" Properties="%(_MSBuildProjectReferenceExistent.SetConfiguration);%(_MSBuildProjectReferenceExistent.SetPlatform);%(_MSBuildProjectReferenceExistent.SetTargetFramework);PublishDir=$([System.IO.Path]::GetFullPath('$(IntermediateOutputPath)ikvmstub'))" RemoveProperties="%(_MSBuildProjectReferenceExistent.GlobalPropertiesToRemove)$(_GlobalPropertiesToRemoveFromProjectReferences);PublishUrl;Location" Condition=" '%(_MSBuildProjectReferenceExistent.IsIkvmExporter)' == 'true' " />
        <PropertyGroup>
            <IkvmExporterPath Condition=" '$(IkvmExporterPath)' == '' And Exists('$(IntermediateOutputPath)ikvmstub\ikvmstub.exe')">$(IntermediateOutputPath)ikvmstub\ikvmstub.exe</IkvmExporterPath>
            <IkvmExporterExec Condition=" '$(IkvmExporterExec)' == '' ">$(IkvmExporterPath)</IkvmExporterExec>
        </PropertyGroup>
        <Message Text="Using ikvmstub executable from project at '$(IkvmExporterPath)'." Importance="high" Condition=" '$(IkvmExporterPath)' != '' " />
    </Target>

    <PropertyGroup>
        <ResolveIkvmRuntimeAssemblyDependsOn>
            $(ResolveIkvmRuntimeAssemblyDependsOn);
            ResolveProjectReferences;
        </ResolveIkvmRuntimeAssemblyDependsOn>
    </PropertyGroup>

    <!-- Resolve IKVM.Runtime from project marked with IsIkvmRuntimeAssembly. -->
    <Target Name="ResolveIkvmRuntimeAssembly" DependsOnTargets="$(ResolveIkvmRuntimeAssemblyDependsOn)">
        <MSBuild Projects="@(_MSBuildProjectReferenceExistent)" Targets="Build" BuildInParallel="$(BuildInParallel)" Properties="%(_MSBuildProjectReferenceExistent.SetConfiguration);%(_MSBuildProjectReferenceExistent.SetPlatform);%(_MSBuildProjectReferenceExistent.SetTargetFramework)" RemoveProperties="%(_MSBuildProjectReferenceExistent.GlobalPropertiesToRemove)$(_GlobalPropertiesToRemoveFromProjectReferences)" Condition=" '%(_MSBuildProjectReferenceExistent.IsIkvmRuntimeAssembly)' == 'true' ">
            <Output TaskParameter="TargetOutputs" ItemName="_IkvmRuntimeAssembly" />
        </MSBuild>
        <PropertyGroup>
            <IkvmRuntimeAssembly Condition=" '$(IkvmRuntimeAssembly)' == '' ">@(_IkvmRuntimeAssembly)</IkvmRuntimeAssembly>
        </PropertyGroup>
        <Message Text="Using IKVM.Runtime from project at '$(IkvmRuntimeAssembly)'." Importance="high" Condition=" '$(_IkvmRuntimeAssembly)' != '' " />
    </Target>

    <PropertyGroup>
        <ResolveIkvmRuntimeJNIAssemblyDependsOn>
            $(ResolveIkvmRuntimeJNIAssemblyDependsOn);
            ResolveProjectReferences;
        </ResolveIkvmRuntimeJNIAssemblyDependsOn>
    </PropertyGroup>

    <!-- Resolve IKVM.Runtime.JNI from project marked with IsIkvmRuntimeJNIAssembly. -->
    <Target Name="ResolveIkvmRuntimeJNIAssembly" DependsOnTargets="$(ResolveIkvmRuntimeJNIAssemblyDependsOn)">
        <MSBuild Projects="@(_MSBuildProjectReferenceExistent)" Targets="Build" BuildInParallel="$(BuildInParallel)" Properties="%(_MSBuildProjectReferenceExistent.SetConfiguration);%(_MSBuildProjectReferenceExistent.SetPlatform);%(_MSBuildProjectReferenceExistent.SetTargetFramework)" RemoveProperties="%(_MSBuildProjectReferenceExistent.GlobalPropertiesToRemove)$(_GlobalPropertiesToRemoveFromProjectReferences)" Condition=" '%(_MSBuildProjectReferenceExistent.IsIkvmRuntimeJNIAssembly)' == 'true' ">
            <Output TaskParameter="TargetOutputs" ItemName="_IkvmRuntimeJNIAssembly" />
        </MSBuild>
        <PropertyGroup>
            <IkvmRuntimeJNIAssembly Condition=" '$(IkvmRuntimeJNIAssembly)' == '' ">@(_IkvmRuntimeJNIAssembly)</IkvmRuntimeJNIAssembly>
        </PropertyGroup>
        <Message Text="Using IKVM.Runtime.JNI from project at '$(IkvmRuntimeJNIAssembly)'." Importance="high" Condition=" '$(_IkvmRuntimeJNIAssembly)' != '' " />
    </Target>

    <PropertyGroup>
        <ResolveIkvmBaseAssemblyDependsOn>
            $(ResolveIkvmBaseAssemblyDependsOn);
            ResolveProjectReferences;
        </ResolveIkvmBaseAssemblyDependsOn>
    </PropertyGroup>

    <!-- Resolve IKVM.Java from project marked with IsIkvmBaseAssembly. -->
    <Target Name="ResolveIkvmBaseAssembly" DependsOnTargets="$(ResolveIkvmBaseAssemblyDependsOn)">
        <MSBuild Projects="@(_MSBuildProjectReferenceExistent)" Targets="Build" BuildInParallel="$(BuildInParallel)" Properties="%(_MSBuildProjectReferenceExistent.SetConfiguration);%(_MSBuildProjectReferenceExistent.SetPlatform);%(_MSBuildProjectReferenceExistent.SetTargetFramework)" RemoveProperties="%(_MSBuildProjectReferenceExistent.GlobalPropertiesToRemove)$(_GlobalPropertiesToRemoveFromProjectReferences)" Condition=" '%(_MSBuildProjectReferenceExistent.IsIkvmBaseAssembly)' == 'true' ">
            <Output TaskParameter="TargetOutputs" ItemName="_IkvmBaseAssembly" />
        </MSBuild>
        <PropertyGroup>
            <IkvmBaseAssembly Condition=" '$(IkvmBaseAssembly)' == '' ">@(_IkvmBaseAssembly)</IkvmBaseAssembly>
        </PropertyGroup>
        <Message Text="Using IKVM.Java from project at '$(IkvmBaseAssembly)'." Importance="high" Condition=" '$(_IkvmBaseAssembly)' != '' " />
    </Target>

    <PropertyGroup>
        <ResolveIkvmFrameworkReferencesDependsOn>
            $(ResolveIkvmFrameworkReferencesDependsOn);
            ResolveIkvmCompiler;
        </ResolveIkvmFrameworkReferencesDependsOn>
    </PropertyGroup>

    <!-- Gathers those references which are either related to the Framework itself, or IKVM. -->
    <Target Name="ResolveIkvmFrameworkReferences" DependsOnTargets="$(ResolveIkvmFrameworkReferencesDependsOn)">
        <ItemGroup>
            <IkvmFrameworkReference Include="$(IntermediateOutputPath)ikvmc\refs\*.dll" />
        </ItemGroup>
    </Target>

</Project>