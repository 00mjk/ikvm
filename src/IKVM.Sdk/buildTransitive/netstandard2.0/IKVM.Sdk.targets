<Project>

    <PropertyGroup Condition=" '$(TargetFramework)' != '' ">
        <IkvmToolFramework Condition="$([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'netstandard1.0'))">netcoreapp3.1</IkvmToolFramework>
        <IkvmToolFramework Condition="$([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'net461'))">net461</IkvmToolFramework>
        <IkvmToolFramework Condition="$([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'netcoreapp3.1'))">netcoreapp3.1</IkvmToolFramework>
        <IkvmToolFolder>$(IkvmToolFramework)</IkvmToolFolder>
        <IkvmToolPath>$([System.IO.Path]::GetFullPath('$(IkvmSdkDir)tools\$(IkvmToolFolder)\'))</IkvmToolPath>
        <IkvmUseDotNetExec>false</IkvmUseDotNetExec>
        <IkvmUseDotNetExec Condition=" '$(IkvmToolFramework)' == 'netcoreapp3.1' ">true</IkvmUseDotNetExec>
    </PropertyGroup>

    <PropertyGroup Condition=" '$(IkvmToolFramework)' == 'net461' ">
        <IkvmTool>$(IkvmToolPath)ikvm.exe</IkvmTool>
        <IkvmcTool>$(IkvmToolPath)ikvmc.exe</IkvmcTool>
        <IkvmstubTool>$(IkvmToolPath)ikvmstub.exe</IkvmstubTool>
    </PropertyGroup>

    <PropertyGroup Condition=" '$(IkvmToolFramework)' == 'netcoreapp3.1' ">
        <IkvmTool>$(IkvmToolPath)ikvm.dll</IkvmTool>
        <IkvmcTool>$(IkvmToolPath)ikvmc.dll</IkvmcTool>
        <IkvmcToolNoStdLib>true</IkvmcToolNoStdLib>
        <IkvmstubTool>$(IkvmToolPath)ikvmstub.dll</IkvmstubTool>
    </PropertyGroup>

    <PropertyGroup Condition=" '$(TargetFramework)' != '' ">
        <IkvmStageDir Condition=" '$(IkvmStageDir)' == '' ">$(IntermediateOutputPath)ikvm-stage\</IkvmStageDir>
        <IkvmCacheDir Condition=" '$(IkvmCacheDir)' == '' ">$(IkvmHomeDir)cache\1\</IkvmCacheDir>
    </PropertyGroup>

    <!-- Gathers those references which are either related to the Framework itself, or IKVM. -->
    <Target Name="GetJavaFrameworkReferences" DependsOnTargets="ResolveAssemblyReferences">
        <ItemGroup>
            <JavaFrameworkReference Include="@(ReferencePath)" Condition=" '%(ReferencePath.FrameworkReferenceName)' != '' Or '$(FrameworkFile)' == 'true' " />
            <IkvmRuntimeAssembly Include="@(ReferencePath)" Condition=" '%(ReferencePath.NuGetPackageId)' == 'IKVM' And '%(Filename)%(Extension)' == 'IKVM.Runtime.dll' " />
        </ItemGroup>
    </Target>

    <!-- Transforms the JavaReference item group into JavaReferenceItem items. -->
    <Target Name="GetJavaReferenceItemsFromJavaReferences" DependsOnTargets="GetJavaFrameworkReferences">
        <ItemGroup>
            <_JavaReferenceItem Include="@(JavaReference)">

            </_JavaReferenceItem>
        </ItemGroup>

        <!-- Probes for default metadata from the reference item. -->
        <IkvmAssignJavaReferenceItemMetadata Items="@(_JavaReferenceItem)">
            <Output TaskParameter="Items" ItemName="_JavaReferenceItemWithMetadata" />
        </IkvmAssignJavaReferenceItemMetadata>

        <!-- Configures the identity value to uniquely identify a reference. -->
        <IkvmAssignJavaReferenceItemIdentity Items="@(_JavaReferenceItemWithMetadata)" ToolVersion="$(IkvmSdkVersion)" ToolFramework="$(IkvmToolFramework)" RuntimeAssembly="@(IkvmRuntimeAssembly)" References="@(JavaFrameworkReference)" >
            <Output TaskParameter="Items" ItemName="_JavaReferenceItemWithIdentity" />
        </IkvmAssignJavaReferenceItemIdentity>

        <!-- Assign newly discovered items. -->
        <ItemGroup>
            <JavaReferenceItem Include="@(_JavaReferenceItemWithIdentity)" />
        </ItemGroup>
    </Target>

    <!-- Duplicate set for reference lookup in batched target. -->
    <Target Name="GetJavaReferenceItemsForLookup">
        <ItemGroup>
            <_JavaReferenceItemForLookup Include="@(JavaReferenceItem)" />
        </ItemGroup>
    </Target>

    <!-- Applies the ResolvedReferences metadata to each item. -->
    <Target Name="GetJavaReferenceItemsResolvedReferencesForItem" DependsOnTargets="GetJavaReferenceItemsForLookup" Outputs="%(JavaReferenceItem.Identity).batch">
        <PropertyGroup>
            <_References>;%(JavaReferenceItem.References);</_References>
        </PropertyGroup>
        <ItemGroup>
            <_ResolvedReferences Include="@(_JavaReferenceItemForLookup->'%(CachePath)')" Condition="$(_References.Contains(';%(Identity);'))" />
        </ItemGroup>
        <ItemGroup>
            <_JavaReferenceItemForItem Include="@(JavaReferenceItem)">
                <ResolvedReferences>@(_ResolvedReferences, ';')</ResolvedReferences>
            </_JavaReferenceItemForItem>
        </ItemGroup>
    </Target>

    <!-- Applies the ResolvedReferences metadata to each item. -->
    <Target Name="GetJavaReferenceItemsResolvedReferences" DependsOnTargets="GetJavaReferenceItemsResolvedReferencesForItem">
        <ItemGroup>
            <JavaReferenceItem Remove="@(JavaReferenceItem)"/>
            <JavaReferenceItem Include="@(_JavaReferenceItemForItem)" />
        </ItemGroup>
    </Target>

    <!-- Applies the Stage and Cache paths to the items.-->
    <Target Name="GetJavaReferenceItemsWithPaths" DependsOnTargets="GetJavaReferenceItemsResolvedReferences">
        <ItemGroup>
            <_JavaReferenceItemWithPaths Include="@(JavaReferenceItem)">
                <StagePath>$(IkvmStageDir)%(IkvmIdentity)\%(AssemblyName).dll</StagePath>
                <CachePath>$(IkvmCacheDir)%(IkvmIdentity)\%(AssemblyName).dll</CachePath>
            </_JavaReferenceItemWithPaths>
            <JavaReferenceItem Remove="@(JavaReferenceItem)"/>
            <JavaReferenceItem Include="@(_JavaReferenceItemWithPaths)" />
        </ItemGroup>
    </Target>

    <!-- Sorts the JavaReferenceItem set. -->
    <Target Name="GetJavaReferenceItemsSorted" DependsOnTargets="GetJavaReferenceItemsWithPaths">
        <IkvmSortJavaReferenceItem Items="@(JavaReferenceItem)" >
            <Output TaskParameter="Items" ItemName="_JavaReferenceItemSorted" />
        </IkvmSortJavaReferenceItem>
        <ItemGroup>
            <JavaReferenceItem Remove="@(JavaReferenceItem)" />
            <JavaReferenceItem Include="@(_JavaReferenceItemSorted)" />
        </ItemGroup>
    </Target>

    <PropertyGroup>
        <GetJavaReferenceItemsDependsOn>
            $(GetJavaReferenceItemsDependsOn);
            GetJavaFrameworkReferences;
            GetJavaReferenceItemsFromJavaReferences;
            GetJavaReferenceItemsForLookup;
            GetJavaReferenceItemsResolvedReferencesForItem;
            GetJavaReferenceItemsResolvedReferences;
            GetJavaReferenceItemsWithPaths;
            GetJavaReferenceItemsSorted;
        </GetJavaReferenceItemsDependsOn>
    </PropertyGroup>

    <!-- Assembles the set of JavaReferenceItems from various sources. -->
    <Target Name="GetJavaReferenceItems" DependsOnTargets="$(GetJavaReferenceItemsDependsOn)" Returns="@(JavaReferenceItem)">

    </Target>

    <!-- Builds the JavaReferenceItems into their output items within the cache. -->
    <Target Name="_BuildJavaReferenceAssemblies" DependsOnTargets="GetJavaReferenceItems" Inputs="@(JavaReferenceItem)" Outputs="%(JavaReferenceItem.CachePath)">
        <MakeDir Directories="$([System.IO.Path]::GetDirectoryName('%(JavaReferenceItem.StagePath)'))" />
        <IkvmCompiler
            ToolPath="$(IkvmcTool)"
            UseDotNetExec="$(IkvmUseDotNetExec)"
            ResponseFile="%(JavaReferenceItem.StagePath).rsp"
            Output="%(JavaReferenceItem.StagePath)"
            Debug="%(JavaReferenceItem.Debug)"
            Assembly="%(JavaReferenceItem.AssemblyName)"
            Version="%(JavaReferenceItem.AssemblyVersion)"
            Runtime="@(IkvmRuntimeAssembly)"
            CompressResources="true"
            Target="library"
            NoStdLib="$(IkvmcToolNoStdLib)"
            References="@(JavaFrameworkReference);%(JavaReferenceItem.ResolvedReferences)"
            Input="%(JavaReferenceItem.FullPath)" />

        <MakeDir Directories="$([System.IO.Path]::GetDirectoryName('%(JavaReferenceItem.CachePath)'))" />
        <Copy SourceFiles="%(JavaReferenceItem.StagePath)" DestinationFiles="%(JavaReferenceItem.CachePath)" OverwriteReadOnlyFiles="true" />
    </Target>

    <PropertyGroup>
        <BuildJavaReferenceAssembliesDependsOn>
            $(BuildJavaReferenceAssembliesDependsOn);
            GetReferenceAssemblyPaths;
            GetJavaReferenceItems;
            GetJavaFrameworkReferences;
            _BuildJavaReferenceAssemblies;
        </BuildJavaReferenceAssembliesDependsOn>
    </PropertyGroup>

    <Target Name="BuildJavaReferenceAssemblies" DependsOnTargets="$(BuildJavaReferenceAssembliesDependsOn)">

    </Target>

    <!-- Ensure the JavaReference assemblies are built before compile. -->
    <PropertyGroup Condition=" '$(TargetFramework)' != '' ">
        <CompileDependsOn>
            BuildJavaReferenceAssemblies;
            $(CompileDependsOn);
        </CompileDependsOn>
    </PropertyGroup>

    <!-- Adds the expected JavaReferences to the Reference set. -->
    <Target Name="_ResolveJavaReferences" DependsOnTargets="GetJavaReferenceItems">
        <ItemGroup>
            <ReferencePath Include="@(JavaReferenceItem->'%(CachePath)')">
                <ReferenceSourceTarget>ResolveJavaRefrences</ReferenceSourceTarget>
                <Aliases>%(JavaReferenceItem.Aliases)</Aliases>
            </ReferencePath>
        </ItemGroup>
    </Target>

    <PropertyGroup>
        <ResolveJavaReferencesDependsOn>
            $(ResolveJavaReferenceAssembliesDependsOn);
            GetJavaReferenceItems;
            _ResolveJavaReferences;
        </ResolveJavaReferencesDependsOn>
    </PropertyGroup>

    <Target Name="ResolveJavaReferences" DependsOnTargets="$(ResolveJavaReferencesDependsOn)">

    </Target>

    <PropertyGroup Condition=" '$(TargetFramework)' != '' ">
        <ResolveReferencesDependsOn>
            $(ResolveReferencesDependsOn);
            ResolveJavaReferences;
        </ResolveReferencesDependsOn>
    </PropertyGroup>

</Project>
