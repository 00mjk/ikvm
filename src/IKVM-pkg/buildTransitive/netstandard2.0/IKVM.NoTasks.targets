<Project>
    <PropertyGroup>
        <MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildThisFileFullPath)</MSBuildAllProjects>
    </PropertyGroup>

    <!--
    This file contains targets which invoke the jobs in 'NoTask' mode. The tasks provided by MSBuild are not used.
    -->

    <UsingTask TaskName="IkvmReferenceItemPrepare" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
        <ParameterGroup />
        <Task>
            <Code Type="Class" Source="$(MSBuildThisFileDirectory)inline\IkvmReferenceItemPrepare.cs" Language="cs" />
        </Task>
    </UsingTask>

    <!-- Populates the IkvmReferenceItem set with required metadata. -->
    <Target Name="_UpdateIkvmReferenceItemsMetadata" DependsOnTargets="GetIkvmReferenceItemsFromIkvmReferences;ResolveIkvmRuntimeAssembly;ResolveIkvmRuntimeJNIAssembly;ResolveIkvmBaseAssembly;ResolveIkvmFrameworkReferences" Condition=" '@(IkvmReferenceItem)' != '' ">
        <Error Text="Could not locate IKVM.Runtime assembly." Condition=" '$(IkvmRuntimeAssembly)' == '' " />
        <Error Text="IKVM.Runtime.dll could not be located at '$(IkvmRuntimeAssembly)'." Condition="!Exists('$(IkvmRuntimeAssembly)')" />
        <Error Text="Could not locate IKVM.Runtime.JNI assembly." Condition=" '$(IkvmRuntimeJNIAssembly)' == '' " />
        <Error Text="IKVM.Runtime.JNI.dll could not be located at '$(IkvmRuntimeJNIAssembly)'." Condition="!Exists('$(IkvmRuntimeJNIAssembly)')" />
        <Error Text="Could not locate IKVM.Java assembly." Condition=" '$(IkvmBaseAssembly)' == '' " />
        <Error Text="IKVM.Java.dll could not be located at '$(IkvmBaseAssembly)'." Condition="!Exists('$(IkvmBaseAssembly)')" />

        <!-- Populates metadata, validates, resolves references, and emits in build order. -->
        <IkvmReferenceItemPrepare Items="@(IkvmReferenceItem)" ToolVersion="$(AssemblyVersion)" ToolFramework="$(IkvmToolFramework)" RuntimeAssembly="$(IkvmRuntimeAssembly)" References="$(IkvmBaseAssembly);$(IkvmRuntimeAssembly);$(IkvmRuntimeJNIAssembly);@(IkvmFrameworkReference)" StageDir="$(IkvmStageDir)" CacheDir="$(IkvmCacheDir)">
            <Output TaskParameter="Items" ItemName="_IkvmReferenceItemWithMetadata" />
        </IkvmReferenceItemPrepare>

        <!-- Assign newly discovered items. -->
        <ItemGroup>
            <IkvmReferenceItem Remove="@(IkvmReferenceItem)"/>
            <IkvmReferenceItem Include="@(_IkvmReferenceItemWithMetadata)" />
        </ItemGroup>
    </Target>

    <!-- Builds the IkvmReferenceItem set into their output items within the cache. -->
    <Target Name="_CompileIkvmReferences" DependsOnTargets="ResolveIkvmCompiler;ResolveIkvmRuntimeAssembly;ResolveIkvmRuntimeJNIAssembly;ResolveIkvmBaseAssembly;ResolveIkvmFrameworkReferences;_GetIkvmReferenceItemsCompileToCachePath" Inputs="$(IkvmCompilerPath);@(IkvmFrameworkReference);$(IkvmBaseAssembly);$(IkvmRuntimeAssembly);$(IkvmRuntimeJNIAssembly);@(_IkvmReferenceItemCompileToCachePath)" Outputs="%(_IkvmReferenceItemCompileToCachePath.CachePath)" Condition=" '@(_IkvmReferenceItemCompileToCachePath.CachePath)' != '' ">
        <Error Text="Could not locate IKVM.Runtime assembly." Condition=" '$(IkvmRuntimeAssembly)' == '' " />
        <Error Text="IKVM.Runtime.dll could not be located at '$(IkvmRuntimeAssembly)'." Condition="!Exists('$(IkvmRuntimeAssembly)')" />
        <Error Text="Could not locate IKVM.Runtime.JNI assembly." Condition=" '$(IkvmRuntimeJNIAssembly)' == '' " />
        <Error Text="IKVM.Runtime.JNI.dll could not be located at '$(IkvmRuntimeJNIAssembly)'." Condition="!Exists('$(IkvmRuntimeJNIAssembly)')" />
        <Error Text="Could not locate IKVM.Java assembly." Condition=" '$(IkvmBaseAssembly)' == '' " />
        <Error Text="IKVM.Java.dll could not be located at '$(IkvmBaseAssembly)'." Condition="!Exists('$(IkvmBaseAssembly)')" />
        <Error Text="Could not locate ikvmc executable." Condition=" '$(IkvmCompilerPath)' == '' " />
        <Error Text="ikvmc could not be located at '$(IkvmCompilerPath)'." Condition="!Exists('$(IkvmCompilerPath)')" />

        <!-- Take IkvmReferenceItem for the current batch on CachePath. -->
        <PropertyGroup>
            <_IkvmReferenceItemToCompileCachePath>%(_IkvmReferenceItemCompileToCachePath.CachePath)</_IkvmReferenceItemToCompileCachePath>
        </PropertyGroup>
        <ItemGroup>
            <_IkvmReferenceItemToCompile Remove="@(_IkvmReferenceItemToCompile)" />
            <_IkvmReferenceItemToCompile Include="@(IkvmReferenceItem)" Condition=" '%(IkvmReferenceItem.CachePath)' == '$(_IkvmReferenceItemToCompileCachePath)' " />
            <_IkvmReferenceItemResolvedReference Remove="@(_IkvmReferenceItemResolvedReference)" />
            <_IkvmReferenceItemResolvedReference Include="%(_IkvmReferenceItemToCompile.ResolvedReferences)" />
        </ItemGroup>

        <!-- Output to stage path then copy to cache path to be atomic. -->
        <MakeDir Directories="$([System.IO.Path]::GetDirectoryName('%(_IkvmReferenceItemToCompile.StagePath)'))" />
        <MakeDir Directories="$([System.IO.Path]::GetDirectoryName('%(_IkvmReferenceItemToCompile.CachePath)'))" />

        <ItemGroup>
            <_IkvmCompilerArgs Remove="@(_IkvmCompilerArgs)" />
            <_IkvmCompilerArgs Include="-debug" Condition=" '%(_IkvmReferenceItemToCompile.Debug)' == 'true' " />
            <_IkvmCompilerArgs Include="-assembly:%(_IkvmReferenceItemToCompile.AssemblyName)" />
            <_IkvmCompilerArgs Include="-version:%(_IkvmReferenceItemToCompile.AssemblyVersion)" Condition=" '%(_IkvmReferenceItemToCompile.AssemblyVersion)' != '' " />
            <_IkvmCompilerArgs Include="-fileversion:%(_IkvmReferenceItemToCompile.AssemblyFileVersion)" Condition=" '%(_IkvmReferenceItemToCompile.AssemblyFileVersion)' != '' " />
            <_IkvmCompilerArgs Include="-runtime:$(IkvmRuntimeAssembly)" />
            <_IkvmCompilerArgs Include="-keyfile:%(_IkvmReferenceItemToCompile.KeyFile)" Condition=" '%(_IkvmReferenceItemToCompile.KeyFile)' != '' " />
            <_IkvmCompilerArgs Include="-delaysign:%(_IkvmReferenceItemToCompile.DelaySign)" Condition=" '%(_IkvmReferenceItemToCompile.DelaySign)' == 'true' " />
            <_IkvmCompilerArgs Include="-compressresources" />
            <_IkvmCompilerArgs Include="-strictfinalfieldsemantics" Condition=" '$(StrictFinalFieldSemantics)' == 'true' " />
            <_IkvmCompilerArgs Include="-removeassertions" Condition=" '$(RemoveAssertions)' == 'true' " />
            <_IkvmCompilerArgs Include="-target:library" />
            <_IkvmCompilerArgs Include="-nostdlib" />
            <_IkvmCompilerArgs Include="-classloader:%(_IkvmReferenceItemToCompile.ClassLoader)" Condition=" '%(_IkvmReferenceItemToCompile.ClassLoader)' != '' " />
            <_IkvmCompilerReferencePath Remove="@(_IkvmCompilerReferencePath)" />
            <_IkvmCompilerReferencePath Include="@(IkvmFrameworkReference);$(IkvmBaseAssembly);$(IkvmRuntimeAssembly);$(IkvmRuntimeJNIAssembly);@(_IkvmReferenceItemResolvedReference->Distinct())" />
            <_IkvmCompilerArgs Include="@(_IkvmCompilerReferencePath->'-reference:%(FullPath)')" />
            <_IkvmCompilerArgs Include="-out:%(_IkvmReferenceItemToCompile.StagePath)" />
            <_IkvmCompilerArgs Include="%(_IkvmReferenceItemToCompile.Compile)" />
        </ItemGroup>
        <WriteLinesToFile File="%(_IkvmReferenceItemToCompile.StagePath).rsp" Lines="@(_IkvmCompilerArgs)" Overwrite="true" />

        <Delete Files="%(_IkvmReferenceItemToCompile.StagePath)" Condition="Exists('%(_IkvmReferenceItemToCompile.StagePath)')" />
        <Exec Command="$(IkvmCompilerExec) @%(_IkvmReferenceItemToCompile.StagePath).rsp" />
        <Copy SourceFiles="%(_IkvmReferenceItemToCompile.StagePath)" DestinationFiles="%(_IkvmReferenceItemToCompile.CachePath)" OverwriteReadOnlyFiles="true" />

        <ItemGroup>
            <FileWrites Include="%(_IkvmReferenceItemToCompile.StagePath)" />
            <FileWrites Include="%(_IkvmReferenceItemToCompile.StagePath).rsp" />
        </ItemGroup>
    </Target>

</Project>