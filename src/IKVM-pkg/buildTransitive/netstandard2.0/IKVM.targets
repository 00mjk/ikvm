<Project>

    <PropertyGroup Condition=" '$(TargetFramework)' != '' ">
        <IkvmTargetFramework Condition="$([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'netstandard1.0'))">NetCore</IkvmTargetFramework>
        <IkvmTargetFramework Condition="$([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'net461'))">NetFramework</IkvmTargetFramework>
        <IkvmTargetFramework Condition="$([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'netcoreapp3.1'))">NetCore</IkvmTargetFramework>
        <IkvmToolsPath>$([System.IO.Path]::GetFullPath('$(IkvmDir)bin\'))</IkvmToolsPath>
    </PropertyGroup>

    <PropertyGroup Condition=" '$(TargetFramework)' != '' ">
        <IkvmStageDir Condition=" '$(IkvmStageDir)' == '' ">$(IntermediateOutputPath)ikvm\stage\1\</IkvmStageDir>
        <IkvmCacheDir Condition=" '$(IkvmCacheDir)' == '' ">$([System.IO.Path]::GetTempPath())ikvm\cache\1\</IkvmCacheDir>
    </PropertyGroup>

    <!-- Gathers those references which are either related to the Framework itself, or IKVM. -->
    <Target Name="GetIkvmCompileReferences" DependsOnTargets="ResolveAssemblyReferences">
        <IkvmCompilerMergeReferenceAssemblies ToolsPath="$(IkvmToolsPath)ikvmc" TargetFramework="$(IkvmTargetFramework)" Items="@(IkvmFrameworkReference)" >
            <Output TaskParameter="Items" ItemName="IkvmFrameworkReference" />
        </IkvmCompilerMergeReferenceAssemblies>

        <!-- Locate runtime assembly in the output. -->
        <ItemGroup>
            <IkvmBaseReference Include="@(ReferencePath)" Condition=" '%(Filename)%(Extension)' == 'IKVM.Java.dll' " />
            <IkvmRuntimeAssembly Include="@(ReferencePath)" Condition=" '%(Filename)%(Extension)' == 'IKVM.Runtime.dll' " />
            <IkvmRuntimeJNIAssembly Include="@(ReferencePath)" Condition=" '%(Filename)%(Extension)' == 'IKVM.Runtime.JNI.dll' " />
        </ItemGroup>
    </Target>

    <!-- Transforms the IkvmReference item group into IkvmReferenceItem items. -->
    <Target Name="GetIkvmReferenceItemsFromIkvmReferences">
        <ItemGroup>
            <IkvmReferenceItem Include="@(IkvmReference)">

            </IkvmReferenceItem>
        </ItemGroup>
    </Target>

    <!-- Populates the IkvmReferenceItem set with required metadata. -->
    <Target Name="GetIkvmReferenceItemsMetadata" DependsOnTargets="GetIkvmReferenceItemsFromIkvmReferences;GetIkvmCompileReferences" Condition=" '@(IkvmReferenceItem)' != '' ">
        <!-- Probes for default metadata from the reference item. -->
        <IkvmReferenceItemAssignMetadata Items="@(IkvmReferenceItem)">
            <Output TaskParameter="Items" ItemName="_IkvmReferenceItemWithMetadata" />
        </IkvmReferenceItemAssignMetadata>

        <!-- Validates the metadata before continuing. -->
        <IkvmReferenceItemValidate Items="@(_IkvmReferenceItemWithMetadata)" >

        </IkvmReferenceItemValidate>

        <!-- Configures the identity value to uniquely identify a reference. -->
        <IkvmReferenceItemAssignIdentity ToolVersion="$(IkvmVersion)" TargetFramework="$(IkvmTargetFramework)" RuntimeAssembly="@(IkvmRuntimeAssembly)" Items="@(_IkvmReferenceItemWithMetadata)" References="@(IkvmFrameworkReference);@(IkvmBaseReference);@(IkvmRuntimeAssembly);@(IkvmRuntimeJNIAssembly)" >
            <Output TaskParameter="Items" ItemName="_IkvmReferenceItemWithIdentity" />
        </IkvmReferenceItemAssignIdentity>

        <!-- Assign newly discovered items. -->
        <ItemGroup>
            <IkvmReferenceItem Remove="@(IkvmReferenceItem)"/>
            <IkvmReferenceItem Include="@(_IkvmReferenceItemWithIdentity)" />
        </ItemGroup>
    </Target>

    <!-- Duplicate set for reference lookup in batched target. -->
    <Target Name="GetIkvmReferenceItemsForLookup" DependsOnTargets="GetIkvmReferenceItemsMetadata" Condition=" '@(IkvmReferenceItem)' != '' ">
        <ItemGroup>
            <_IkvmReferenceItemForLookup Include="@(IkvmReferenceItem)" />
        </ItemGroup>
    </Target>

    <!-- Applies the ResolvedReferences metadata to each item. -->
    <Target Name="GetIkvmReferenceItemsResolvedReferencesForItem" DependsOnTargets="GetIkvmReferenceItemsForLookup" Outputs="%(IkvmReferenceItem.Identity).batch">
        <PropertyGroup>
            <_References>;%(IkvmReferenceItem.References);</_References>
        </PropertyGroup>
        <ItemGroup>
            <_ResolvedReferences Include="@(_IkvmReferenceItemForLookup->'%(CachePath)')" Condition="$(_References.Contains(';%(Identity);'))" />
        </ItemGroup>
        <ItemGroup>
            <_IkvmReferenceItemForItem Include="@(IkvmReferenceItem)">
                <ResolvedReferences>@(_ResolvedReferences, ';')</ResolvedReferences>
            </_IkvmReferenceItemForItem>
        </ItemGroup>
    </Target>

    <!-- Applies the ResolvedReferences metadata to each item. -->
    <Target Name="GetIkvmReferenceItemsResolvedReferences" DependsOnTargets="GetIkvmReferenceItemsResolvedReferencesForItem" Condition=" '@(IkvmReferenceItem)' != '' ">
        <ItemGroup>
            <IkvmReferenceItem Remove="@(IkvmReferenceItem)"/>
            <IkvmReferenceItem Include="@(_IkvmReferenceItemForItem)" />
        </ItemGroup>
    </Target>

    <!-- Applies the Stage and Cache paths to the items.-->
    <Target Name="GetIkvmReferenceItemsPaths" DependsOnTargets="GetIkvmReferenceItemsResolvedReferences" Condition=" '@(IkvmReferenceItem)' != '' ">
        <ItemGroup>
            <_IkvmReferenceItemWithPaths Include="@(IkvmReferenceItem)">
                <StagePath>$(IkvmStageDir)%(IkvmIdentity)\%(AssemblyName).dll</StagePath>
                <CachePath>$(IkvmCacheDir)%(IkvmIdentity)\%(AssemblyName).dll</CachePath>
            </_IkvmReferenceItemWithPaths>
            <IkvmReferenceItem Remove="@(IkvmReferenceItem)"/>
            <IkvmReferenceItem Include="@(_IkvmReferenceItemWithPaths)" />
        </ItemGroup>
    </Target>

    <!-- Sorts the IkvmReferenceItem set. -->
    <Target Name="GetIkvmReferenceItemsSorted" DependsOnTargets="GetIkvmReferenceItemsPaths" Condition=" '@(IkvmReferenceItem)' != '' ">
        <IkvmReferenceItemSort Items="@(IkvmReferenceItem)" >
            <Output TaskParameter="Items" ItemName="_IkvmReferenceItemSorted" />
        </IkvmReferenceItemSort>
        <ItemGroup>
            <IkvmReferenceItem Remove="@(IkvmReferenceItem)" />
            <IkvmReferenceItem Include="@(_IkvmReferenceItemSorted)" />
        </ItemGroup>
    </Target>

    <PropertyGroup>
        <GetIkvmReferenceItemsDependsOn>
            $(GetIkvmReferenceItemsDependsOn);
            GetIkvmCompileReferences;
            GetIkvmReferenceItemsFromIkvmReferences;
            GetIkvmReferenceItemsMetadata;
            GetIkvmReferenceItemsForLookup;
            GetIkvmReferenceItemsResolvedReferencesForItem;
            GetIkvmReferenceItemsResolvedReferences;
            GetIkvmReferenceItemsPaths;
            GetIkvmReferenceItemsSorted;
        </GetIkvmReferenceItemsDependsOn>
    </PropertyGroup>

    <!-- Assembles the set of IkvmReferenceItems from various sources. -->
    <Target Name="GetIkvmReferenceItems" DependsOnTargets="$(GetIkvmReferenceItemsDependsOn)" Returns="@(IkvmReferenceItem)">

    </Target>

    <!-- Expands the IkvmReferenceItem set by the Compile metadata for inputs and outputs of the build target. -->
    <Target Name="_GetIkvmReferenceItemsCompileToCachePath" DependsOnTargets="GetIkvmReferenceItems" Condition=" '@(IkvmReferenceItem)' != '' ">
        <ItemGroup>
            <_IkvmReferenceItemCompileToCachePath Include="@(IkvmReferenceItem->'%(Compile)')" Condition=" '%(IkvmReferenceItem.Compile)' != '' ">
                <CachePath>%(IkvmReferenceItem.CachePath)</CachePath>
            </_IkvmReferenceItemCompileToCachePath>
        </ItemGroup>
    </Target>

    <!-- Builds the IkvmReferenceItem set into their output items within the cache. -->
    <Target Name="_CompileIkvmReferences" DependsOnTargets="GetIkvmCompileReferences;_GetIkvmReferenceItemsCompileToCachePath" Inputs="@(_IkvmReferenceItemCompileToCachePath)" Outputs="%(_IkvmReferenceItemCompileToCachePath.CachePath)" Condition=" '@(IkvmReferenceItemCompileToCachePath.CachePath)' != '' ">
        <Error Text="IKVM references are not yet supported for '$(TargetFramework)' projects." Condition=" '$(IkvmToolFramework)' == 'netcoreapp3.1' And '$(TargetFramework)' != 'netcoreapp3.1' " />

        <!-- Take IkvmReferenceItem for the current batch on CachePath. -->
        <PropertyGroup>
            <_IkvmReferenceItemToCompileCachePath>%(_IkvmReferenceItemCompileToCachePath.CachePath)</_IkvmReferenceItemToCompileCachePath>
        </PropertyGroup>
        <ItemGroup>
            <_IkvmReferenceItemToCompile Remove="@(_IkvmReferenceItemToCompile)" />
            <_IkvmReferenceItemToCompile Include="@(IkvmReferenceItem)" Condition=" '%(IkvmReferenceItem.CachePath)' == '$(_IkvmReferenceItemToCompileCachePath)' " />
        </ItemGroup>

        <!-- Output to stage path then copy to cache path to be atomic. -->
        <MakeDir Directories="$([System.IO.Path]::GetDirectoryName('%(_IkvmReferenceItemToCompile.StagePath)'))" />
        <MakeDir Directories="$([System.IO.Path]::GetDirectoryName('%(_IkvmReferenceItemToCompile.CachePath)'))" />

        <!-- Compile the reference item. -->
        <IkvmCompiler
            ToolsPath="$(IkvmToolsPath)ikvmc"
            TargetFramework="$(IkvmTargetFramework)"
            ResponseFile="%(_IkvmReferenceItemToCompile.StagePath).rsp"
            Output="%(_IkvmReferenceItemToCompile.StagePath)"
            Assembly="%(_IkvmReferenceItemToCompile.AssemblyName)"
            Version="%(_IkvmReferenceItemToCompile.AssemblyVersion)"
            Runtime="@(IkvmRuntimeAssembly)"
            Target="library"
            Debug="%(_IkvmReferenceItemToCompile.Debug)"
            CompressResources="true"
            NoStdLib="true"
            References="@(IkvmFrameworkReference);@(IkvmBaseAssembly);@(IkvmRuntimeAssembly);@(IkvmRuntimeJNIAssembly);%(_IkvmReferenceItemToCompile.ResolvedReferences)"
            Input="%(_IkvmReferenceItemToCompile.Compile)"
            Condition=" '%(_IkvmReferenceItemToCompile.Compile)' != '' "/>
        <Copy
            SourceFiles="%(_IkvmReferenceItemToCompile.StagePath)"
            DestinationFiles="%(_IkvmReferenceItemToCompile.CachePath)"
            OverwriteReadOnlyFiles="true" />
    </Target>

    <PropertyGroup>
        <CompileIkvmReferencesDependsOn>
            $(CompileIkvmReferenceAssemblies);
            GetReferenceAssemblyPaths;
            GetIkvmReferenceItems;
            GetIkvmCompileReferences;
            _GetIkvmReferenceItemsCompileToCachePath;
            _CompileIkvmReferences;
        </CompileIkvmReferencesDependsOn>
    </PropertyGroup>

    <Target Name="CompileIkvmReferences" DependsOnTargets="$(CompileIkvmReferencesDependsOn)">

    </Target>

    <!-- Ensure the IkvmReference assemblies are built before compile. -->
    <PropertyGroup Condition=" '$(TargetFramework)' != '' ">
        <CompileDependsOn>
            CompileIkvmReferences;
            $(CompileDependsOn);
        </CompileDependsOn>
    </PropertyGroup>

    <!-- Adds the expected IkvmReferences to the Reference set. -->
    <Target Name="_ResolveIkvmReferences" DependsOnTargets="GetIkvmReferenceItems">
        <ItemGroup>
            <ReferencePath Include="@(IkvmReferenceItem->'%(CachePath)')">
                <ReferenceSourceTarget>ResolveIkvmReferences</ReferenceSourceTarget>
                <Aliases>%(IkvmReferenceItem.Aliases)</Aliases>
            </ReferencePath>
            <ReferenceCopyLocalPaths Include="@(IkvmReferenceItem->'%(CachePath)')">
                <ReferenceSourceTarget>ResolveIkvmReferences</ReferenceSourceTarget>
                <Aliases>%(IkvmReferenceItem.Aliases)</Aliases>
            </ReferenceCopyLocalPaths>
        </ItemGroup>
    </Target>

    <PropertyGroup>
        <ResolveIkvmReferencesDependsOn>
            $(ResolveIkvmReferencesDependsOn);
            GetIkvmReferenceItems;
            _ResolveIkvmReferences;
        </ResolveIkvmReferencesDependsOn>
    </PropertyGroup>

    <Target Name="ResolveIkvmReferences" DependsOnTargets="$(ResolveIkvmReferencesDependsOn)">

    </Target>

    <PropertyGroup Condition=" '$(TargetFramework)' != '' ">
        <ResolveReferencesDependsOn>
            $(ResolveReferencesDependsOn);
            ResolveIkvmReferences;
        </ResolveReferencesDependsOn>
    </PropertyGroup>

</Project>
