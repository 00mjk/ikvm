<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <PropertyGroup>
        <MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildThisFileFullPath)</MSBuildAllProjects>
    </PropertyGroup>
    
    <!--
    This file contains targets which are used to derive various dependent items from existing ProjectReferences.
    It is used by setting UseIkvmProjectReferences to 'true', as done by projects that are building within the
    IKVM tree itself and should derive paths from other projects instead of packages.
    -->

    <PropertyGroup>
        <ResolveJavaCompilerDependsOn>
            $(ResolveJavaCompilerDependsOn);
            ResolveProjectReferences;
        </ResolveJavaCompilerDependsOn>
    </PropertyGroup>

    <!-- Resolve JavaCompiler from project marked with IsJavaCompiler. -->
    <Target Name="ResolveJavaCompiler" DependsOnTargets="$(ResolveJavaCompilerDependsOn)">
        <MSBuild Projects="@(_MSBuildProjectReferenceExistent)" Targets="Build" BuildInParallel="$(BuildInParallel)" Properties="%(_MSBuildProjectReferenceExistent.SetConfiguration);%(_MSBuildProjectReferenceExistent.SetPlatform);%(_MSBuildProjectReferenceExistent.SetTargetFramework)" RemoveProperties="%(_MSBuildProjectReferenceExistent.GlobalPropertiesToRemove)$(_GlobalPropertiesToRemoveFromProjectReferences)" Condition=" '%(_MSBuildProjectReferenceExistent.IsJavaCompiler)' == 'true' ">
            <Output TaskParameter="TargetOutputs" ItemName="_JavaCompilerPath" />
        </MSBuild>
        <PropertyGroup>
            <JavaCompilerPath Condition=" '$(JavaCompilerPath)' == '' ">@(_JavaCompilerPath)</JavaCompilerPath>
            <JavaCompilerExec Condition=" '$(JavaCompilerExec)' == '' ">$(_IkvmToolExecPrefix)$(JavaCompilerPath)</JavaCompilerExec>
        </PropertyGroup>
        <Message Text="Resolved javac executable from project at '$(JavaCompilerPath)'." Importance="high" Condition=" '$(_JavaCompilerPath)' != '' " />
    </Target>

    <PropertyGroup>
        <ResolveIkvmCompilerDependsOn>
            $(ResolveIkvmCompilerDependsOn);
            ResolveProjectReferences;
        </ResolveIkvmCompilerDependsOn>
    </PropertyGroup>

    <!-- Resolve IkvmCompiler from project marked with IsIkvmCompiler. -->
    <Target Name="ResolveIkvmCompiler" DependsOnTargets="$(ResolveIkvmCompilerDependsOn)">
        <MSBuild Projects="@(_MSBuildProjectReferenceExistent)" Targets="Build" BuildInParallel="$(BuildInParallel)" Properties="%(_MSBuildProjectReferenceExistent.SetConfiguration);%(_MSBuildProjectReferenceExistent.SetPlatform);%(_MSBuildProjectReferenceExistent.SetTargetFramework)" RemoveProperties="%(_MSBuildProjectReferenceExistent.GlobalPropertiesToRemove)$(_GlobalPropertiesToRemoveFromProjectReferences)" Condition=" '%(_MSBuildProjectReferenceExistent.IsIkvmCompiler)' == 'true' ">
            <Output TaskParameter="TargetOutputs" ItemName="_IkvmCompilerPath" />
        </MSBuild>
        <PropertyGroup>
            <IkvmCompilerPath Condition=" '$(IkvmCompilerPath)' == '' ">@(_IkvmCompilerPath)</IkvmCompilerPath>
            <IkvmCompilerExec Condition=" '$(IkvmCompilerExec)' == '' ">$(_IkvmToolExecPrefix)$(IkvmCompilerPath)</IkvmCompilerExec>
        </PropertyGroup>
        <Message Text="Using ikvmc executable from project at '$(IkvmCompilerPath)'." Importance="high" Condition=" '$(_IkvmCompilerPath)' != '' " />
    </Target>

    <PropertyGroup>
        <ResolveIkvmExporterDependsOn>
            $(ResolveIkvmExporterDependsOn);
            ResolveProjectReferences;
        </ResolveIkvmExporterDependsOn>
    </PropertyGroup>

    <!-- Resolve IkvmExporter from project marked with IsIkvmCompiler. -->
    <Target Name="ResolveIkvmExporter" DependsOnTargets="$(ResolveIkvmExporterDependsOn)">
        <MSBuild Projects="@(_MSBuildProjectReferenceExistent)" Targets="Build" BuildInParallel="$(BuildInParallel)" Properties="%(_MSBuildProjectReferenceExistent.SetConfiguration);%(_MSBuildProjectReferenceExistent.SetPlatform);%(_MSBuildProjectReferenceExistent.SetTargetFramework)" RemoveProperties="%(_MSBuildProjectReferenceExistent.GlobalPropertiesToRemove)$(_GlobalPropertiesToRemoveFromProjectReferences)" Condition=" '%(_MSBuildProjectReferenceExistent.IsIkvmExporter)' == 'true' ">
            <Output TaskParameter="TargetOutputs" ItemName="_IkvmExporterPath" />
        </MSBuild>
        <PropertyGroup>
            <IkvmExporterPath Condition=" '$(IkvmExporterPath)' == '' ">@(_IkvmExporterPath)</IkvmExporterPath>
            <IkvmExporterExec Condition=" '$(IkvmExporterExec)' == '' ">$(_IkvmToolExecPrefix)$(IkvmExporterPath)</IkvmExporterExec>
        </PropertyGroup>
        <Message Text="Using ikvmstub executable from project at '$(IkvmExporterPath)'." Importance="high" Condition=" '$(_IkvmExporterPath)' != '' " />
    </Target>

    <PropertyGroup>
        <ResolveIkvmRuntimeAssemblyDependsOn>
            $(ResolveIkvmRuntimeAssemblyDependsOn);
            ResolveProjectReferences;
        </ResolveIkvmRuntimeAssemblyDependsOn>
    </PropertyGroup>

    <!-- Resolve IKVM.Runtime from project marked with IsIkvmRuntimeAssembly. -->
    <Target Name="ResolveIkvmRuntimeAssembly" DependsOnTargets="$(ResolveIkvmRuntimeAssemblyDependsOn)">
        <MSBuild Projects="@(_MSBuildProjectReferenceExistent)" Targets="Build" BuildInParallel="$(BuildInParallel)" Properties="%(_MSBuildProjectReferenceExistent.SetConfiguration);%(_MSBuildProjectReferenceExistent.SetPlatform);%(_MSBuildProjectReferenceExistent.SetTargetFramework)" RemoveProperties="%(_MSBuildProjectReferenceExistent.GlobalPropertiesToRemove)$(_GlobalPropertiesToRemoveFromProjectReferences)" Condition=" '%(_MSBuildProjectReferenceExistent.IsIkvmRuntimeAssembly)' == 'true' ">
            <Output TaskParameter="TargetOutputs" ItemName="_IkvmRuntimeAssembly" />
        </MSBuild>
        <PropertyGroup>
            <IkvmRuntimeAssembly Condition=" '$(IkvmRuntimeAssembly)' == '' ">@(_IkvmRuntimeAssembly)</IkvmRuntimeAssembly>
        </PropertyGroup>
        <Message Text="Using IKVM.Runtime from project at '$(IkvmRuntimeAssembly)'." Importance="high" Condition=" '$(_IkvmRuntimeAssembly)' != '' " />
    </Target>

    <PropertyGroup>
        <ResolveIkvmRuntimeJNIAssemblyDependsOn>
            $(ResolveIkvmRuntimeJNIAssemblyDependsOn);
            ResolveProjectReferences;
        </ResolveIkvmRuntimeJNIAssemblyDependsOn>
    </PropertyGroup>

    <!-- Resolve IKVM.Runtime.JNI from project marked with IsIkvmRuntimeJNIAssembly. -->
    <Target Name="ResolveIkvmRuntimeJNIAssembly" DependsOnTargets="$(ResolveIkvmRuntimeJNIAssemblyDependsOn)">
        <MSBuild Projects="@(_MSBuildProjectReferenceExistent)" Targets="Build" BuildInParallel="$(BuildInParallel)" Properties="%(_MSBuildProjectReferenceExistent.SetConfiguration);%(_MSBuildProjectReferenceExistent.SetPlatform);%(_MSBuildProjectReferenceExistent.SetTargetFramework)" RemoveProperties="%(_MSBuildProjectReferenceExistent.GlobalPropertiesToRemove)$(_GlobalPropertiesToRemoveFromProjectReferences)" Condition=" '%(_MSBuildProjectReferenceExistent.IsIkvmRuntimeJNIAssembly)' == 'true' ">
            <Output TaskParameter="TargetOutputs" ItemName="_IkvmRuntimeJNIAssembly" />
        </MSBuild>
        <PropertyGroup>
            <IkvmRuntimeJNIAssembly Condition=" '$(IkvmRuntimeJNIAssembly)' == '' ">@(_IkvmRuntimeJNIAssembly)</IkvmRuntimeJNIAssembly>
        </PropertyGroup>
        <Message Text="Using IKVM.Runtime.JNI from project at '$(IkvmRuntimeJNIAssembly)'." Importance="high" Condition=" '$(_IkvmRuntimeJNIAssembly)' != '' " />
    </Target>

    <PropertyGroup>
        <ResolveIkvmBaseAssemblyDependsOn>
            $(ResolveIkvmBaseAssemblyDependsOn);
            ResolveProjectReferences;
        </ResolveIkvmBaseAssemblyDependsOn>
    </PropertyGroup>

    <!-- Resolve IKVM.Java from project marked with IsIkvmBaseAssembly. -->
    <Target Name="ResolveIkvmBaseAssembly" DependsOnTargets="$(ResolveIkvmBaseAssemblyDependsOn)">
        <MSBuild Projects="@(_MSBuildProjectReferenceExistent)" Targets="Build" BuildInParallel="$(BuildInParallel)" Properties="%(_MSBuildProjectReferenceExistent.SetConfiguration);%(_MSBuildProjectReferenceExistent.SetPlatform);%(_MSBuildProjectReferenceExistent.SetTargetFramework)" RemoveProperties="%(_MSBuildProjectReferenceExistent.GlobalPropertiesToRemove)$(_GlobalPropertiesToRemoveFromProjectReferences)" Condition=" '%(_MSBuildProjectReferenceExistent.IsIkvmBaseAssembly)' == 'true' ">
            <Output TaskParameter="TargetOutputs" ItemName="_IkvmBaseAssembly" />
        </MSBuild>
        <PropertyGroup>
            <IkvmBaseAssembly Condition=" '$(IkvmBaseAssembly)' == '' ">@(_IkvmBaseAssembly)</IkvmBaseAssembly>
        </PropertyGroup>
        <Message Text="Using IKVM.Java from project at '$(IkvmBaseAssembly)'." Importance="high" Condition=" '$(_IkvmBaseAssembly)' != '' " />
    </Target>

    <PropertyGroup>
        <ResolveIkvmReferenceAssembliesDependsOn>
            ResolveProjectReferences;
            ResolveIkvmCompiler;
            ResolveIkvmRuntimeAssembly;
        </ResolveIkvmReferenceAssembliesDependsOn>
    </PropertyGroup>

    <!-- Gathers those references which are either related to the Framework itself, or IKVM. -->
    <Target Name="ResolveIkvmReferenceAssemblies" DependsOnTargets="$(ResolveIkvmReferenceAssembliesDependsOn)">
        <ItemGroup>
            
        </ItemGroup>
    </Target>

</Project>
