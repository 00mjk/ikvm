<Project>

    <PropertyGroup>
        <GlobalPropertiesToRemove>GlobalPropertiesToRemove;$(GlobalPropertiesToRemove);PublishDir;PackageOutputPath</GlobalPropertiesToRemove>
    </PropertyGroup>

    <ItemDefinitionGroup>
        <ResolvedFileToPublish>
            <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
        </ResolvedFileToPublish>
    </ItemDefinitionGroup>

    <!-- Adds an index value to each item. Can be used to ensure at least one unique metadata value is available on each item. -->
    <UsingTask TaskName="AddIndexMetadata" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
        <ParameterGroup>
            <Items ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" Output="true" />
            <MetadataName ParameterType="System.String" Required="true" />
        </ParameterGroup>
        <Task>
            <Using Namespace="System" />
            <Code Type="Fragment" Language="cs">
                <![CDATA[
                var i = 0;
                foreach (var item in Items)
                    item.SetMetadata(MetadataName, (i++).ToString());
                ]]>
            </Code>
        </Task>
    </UsingTask>

    <UsingTask TaskName="ReplaceFileText" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
        <ParameterGroup>
            <InputFilename ParameterType="System.String" Required="true" />
            <OutputFilename ParameterType="System.String" Required="true" />
            <MatchExpression ParameterType="System.String" Required="true" />
            <ReplacementText ParameterType="System.String" Required="true" />
        </ParameterGroup>
        <Task>
            <Reference Include="System.Core" />
            <Using Namespace="System" />
            <Using Namespace="System.IO" />
            <Using Namespace="System.Text.RegularExpressions" />
            <Code Type="Fragment" Language="cs">
                <![CDATA[
                File.WriteAllText(OutputFilename,Regex.Replace(File.ReadAllText(InputFilename), MatchExpression, ReplacementText));
                ]]>
            </Code>
        </Task>
    </UsingTask>

    <!-- Attempt to remove the PublishDir from the evaluation graph to prevent multiple evaluation. -->
    <Target Name="AddGlobalPropertiesToRemoveFromProperty" BeforeTargets="AssignProjectConfiguration">
        <ItemGroup>
            <ProjectReference Update="@(ProjectReference)">
                <GlobalPropertiesToRemove>%(ProjectReference.GlobalPropertiesToRemove);$(GlobalPropertiesToRemove)</GlobalPropertiesToRemove>
            </ProjectReference>
        </ItemGroup>
    </Target>

    <!-- Publish target that returns publish directory. -->
    <Target Name="PublishAndGetPublishDir" DependsOnTargets="Publish" Returns="$(_PublishDirFullPath)">
        <PropertyGroup>
            <_PublishDirFullPath>$([System.IO.Path]::GetFullPath('$(PublishDir)'))</_PublishDirFullPath>
        </PropertyGroup>
    </Target>

    <!-- LibProjectReferences are references to vcxproj that that have their target outputs collected and included into the content directory. This allows multi-platform targeting. -->
    <Target Name="GetLibProjectReferences" Condition=" '@(LibProjectReference)' != '' ">
        <ItemGroup>
            <LibProjectReference Update="@(LibProjectReference)">
                <GlobalPropertiesToRemove>%(LibProjectReference.GlobalPropertiesToRemove);$(GlobalPropertiesToRemove)</GlobalPropertiesToRemove>
            </LibProjectReference>
        </ItemGroup>
        <MSBuild Projects="@(LibProjectReference->'%(ProjectFile)')" Targets="GetTargetPath" BuildInParallel="$(BuildInParallel)" Properties="Platform=%(LibProjectReference.Platform);Configuration=%(LibProjectReference.Configuration)" RemoveProperties="$(GlobalPropertiesToRemove);%(LibProjectReference.GlobalPropertiesToRemove)">
            <Output TaskParameter="TargetOutputs" ItemName="_LibProjectReferenceWithOutputPath" />
        </MSBuild>
        <ItemGroup>
            <LibProjectReferenceWithOutputPath Include="@(_LibProjectReferenceWithOutputPath)">
                <OutputPath>%(Identity)</OutputPath>
            </LibProjectReferenceWithOutputPath>
        </ItemGroup>
    </Target>

    <Target Name="GetItemsForLibProjectReferences" BeforeTargets="Build;AssignTargetPaths" DependsOnTargets="GetLibProjectReferences" Condition=" '$(DesignTimeBuild)' != 'true' And '@(LibProjectReference)' != '' ">
        <ItemGroup>
            <None Include="@(LibProjectReferenceWithOutputPath->'%(OutputPath)')">
                <TargetPath></TargetPath>
                <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
                <Link>$([MSBuild]::NormalizePath('%(LibProjectReferenceWithOutputPath.OutputDir)\%(LibProjectReferenceWithOutputPath.Filename)%(LibProjectReferenceWithOutputPath.Extension)'))</Link>
                <Pack>true</Pack>
                <PackagePath>$([MSBuild]::NormalizeDirectory('%(LibProjectReferenceWithOutputPath.OutputDir)'))</PackagePath>
                <PackageCopyToOutput>true</PackageCopyToOutput>
            </None>
        </ItemGroup>
    </Target>

    <Target Name="BuildLibProjectReferences" BeforeTargets="Compile" DependsOnTargets="GetLibProjectReferences" Condition=" '$(DesignTimeBuild)' != 'true' And '@(LibProjectReference)' != '' ">
        <MSBuild Projects="%(LibProjectReferenceWithOutputPath.ProjectFile)" Targets="Build" BuildInParallel="$(BuildInParallel)" Properties="Platform=%(LibProjectReferenceWithOutputPath.Platform);Configuration=%(LibProjectReferenceWithOutputPath.Configuration)" RemoveProperties="$(GlobalPropertiesToRemove);%(LibProjectReferenceWithOutputPath.GlobalPropertiesToRemove)">
            <Output TaskParameter="TargetOutputs" ItemName="LibProjectReferencesCompileOutput" />
        </MSBuild>
    </Target>

    <!-- 
    
        PublishProjectReference
        
        These references have their Publish target invoked, with the output being consumed by the containing project.
        
    -->

    <Target Name="AssignPublishProjectConfiguration" Condition=" '$(DesignTimeBuild)' != 'true' And '@(PublishProjectReference)' != '' ">
        <PropertyGroup>
            <OnlyReferenceAndBuildProjectsEnabledInSolutionConfiguration Condition="'$(OnlyReferenceAndBuildProjectsEnabledInSolutionConfiguration)' == ''">true</OnlyReferenceAndBuildProjectsEnabledInSolutionConfiguration>
            <ShouldUnsetParentConfigurationAndPlatform Condition="'$(ShouldUnsetParentConfigurationAndPlatform)' == '' and ('$(BuildingInsideVisualStudio)' == 'true' or '$(BuildingSolutionFile)' == 'true')">true</ShouldUnsetParentConfigurationAndPlatform>
            <ShouldUnsetParentConfigurationAndPlatform Condition="'$(ShouldUnsetParentConfigurationAndPlatform)' == ''">false</ShouldUnsetParentConfigurationAndPlatform>
        </PropertyGroup>
        <AssignProjectConfiguration ProjectReferences="@(PublishProjectReference)" CurrentProject="$(MSBuildProjectFullPath)" CurrentProjectConfiguration="$(Configuration)" CurrentProjectPlatform="$(Platform)" DefaultToVcxPlatformMapping="$(DefaultToVcxPlatformMapping)" VcxToDefaultPlatformMapping="$(VcxToDefaultPlatformMapping)" OutputType="$(OutputType)" ResolveConfigurationPlatformUsingMappings="false" SolutionConfigurationContents="$(CurrentSolutionConfigurationContents)" AddSyntheticProjectReferencesForSolutionDependencies="false" OnlyReferenceAndBuildProjectsEnabledInSolutionConfiguration="$(OnlyReferenceAndBuildProjectsEnabledInSolutionConfiguration)" ShouldUnsetParentConfigurationAndPlatform="$(ShouldUnsetParentConfigurationAndPlatform)">
            <Output TaskParameter="AssignedProjects" ItemName="_PublishProjectReferenceWithConfiguration"/>
            <Output TaskParameter="UnassignedProjects" ItemName="_PublishProjectReferenceWithConfiguration"/>
        </AssignProjectConfiguration>
    </Target>

    <Target Name="GetPublishProjectReferences" DependsOnTargets="AssignPublishProjectConfiguration" Condition=" '$(DesignTimeBuild)' != 'true' And '@(_PublishProjectReferenceWithConfiguration)' != '' ">
        <ItemGroup>
            <__PublishProjectReference Include="@(_PublishProjectReferenceWithConfiguration)">
                <ProjectName>$([System.IO.Path]::GetFileNameWithoutExtension('%(Identity)'))</ProjectName>
                <ProjectTargetPath Condition=" '%(_PublishProjectReferenceWithConfiguration.ProjectTargetPath)' != '' ">$([MSBuild]::NormalizePath('%(_PublishProjectReferenceWithConfiguration.ProjectTargetPath)'))</ProjectTargetPath>
                <ProjectPackagePath Condition=" '%(_PublishProjectReferenceWithConfiguration.ProjectPackagePath)' != '' ">$([MSBuild]::NormalizeDirectory('%(_PublishProjectReferenceWithConfiguration.ProjectPackagePath)'))</ProjectPackagePath>
            </__PublishProjectReference>
        </ItemGroup>
        <AddIndexMetadata Items="@(__PublishProjectReference)" MetadataName="_Index">
            <Output TaskParameter="Items" ItemName="_PublishProjectReference" />
        </AddIndexMetadata>
    </Target>

    <Target Name="GetPublishProjectReferenceItems" DependsOnTargets="GetPublishProjectReferences" Inputs="@(_PublishProjectReference)" Outputs="%(_PublishProjectReference.Identity)\%(_PublishProjectReference._Index)\null" Condition=" '$(DesignTimeBuild)' != 'true' And '@(_PublishProjectReference)' != '' ">
        <MSBuild Projects="%(_PublishProjectReference.Identity)" Targets="PublishAndGetPublishDir" BuildInParallel="$(BuildInParallel)" Properties="%(_PublishProjectReference.SetConfiguration);%(_PublishProjectReference.SetPlatform);%(_PublishProjectReference.SetTargetFramework);%(_PublishProjectReference.SetRuntimeIdentifier);ProjectName=;ProjectTargetPath=;ProjectPackagePath=" RemoveProperties="$(GlobalPropertiesToRemove);%(_PublishProjectReference.GlobalPropertiesToRemove);ProjectName;ProjectTargetPath;ProjectPackagePath" RebaseOutputs="true">
            <Output TaskParameter="TargetOutputs" PropertyName="_PublishProjectReferencePublishDir" />
        </MSBuild>
        <PropertyGroup>
            <_ProjectName>%(_PublishProjectReference.ProjectName)</_ProjectName>
            <_ProjectTargetPath>%(_PublishProjectReference.ProjectTargetPath)</_ProjectTargetPath>
            <_ProjectPackagePath>%(_PublishProjectReference.ProjectPackagePath)</_ProjectPackagePath>
        </PropertyGroup>
        <ItemGroup>
            <_PublishProjectReferenceItemsInput Include="$(_PublishProjectReferencePublishDir)\**\*" />
            <_PublishProjectReferenceItems Include="@(_PublishProjectReferenceItemsInput)">
                <ProjectName>$(_ProjectName)</ProjectName>
                <ProjectTargetPath>$(_ProjectTargetPath)</ProjectTargetPath>
                <ProjectPackagePath>$(_ProjectPackagePath)</ProjectPackagePath>
                <TargetPath>%(RecursiveDir)%(Filename)%(Extension)</TargetPath>
            </_PublishProjectReferenceItems>
        </ItemGroup>
    </Target>

    <Target Name="GetPublishProjectReferenceCopyToOutputDirectoryItems" BeforeTargets="Build;AssignTargetPaths" DependsOnTargets="GetPublishProjectReferenceItems" Condition=" '$(DesignTimeBuild)' != 'true' and '@(_PublishProjectReferenceItems)' != '' ">
        <ItemGroup>
            <ContentWithTargetPath Include="@(_PublishProjectReferenceItems)" Condition=" '%(_PublishProjectReferenceItems.ProjectTargetPath)' != '' ">
                <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
                <TargetPath>%(_PublishProjectReferenceItems.ProjectTargetPath)%(_PublishProjectReferenceItems.TargetPath)</TargetPath>
            </ContentWithTargetPath>
        </ItemGroup>
    </Target>

    <PropertyGroup>
        <GetCopyToOutputDirectoryItemsDependsOn>
            AssignPublishProjectConfiguration;
            GetPublishProjectReferences;
            GetPublishProjectReferenceItems;
            GetPublishProjectReferenceCopyToOutputDirectoryItems;
            $(GetCopyToOutputDirectoryItemsDependsOn);
        </GetCopyToOutputDirectoryItemsDependsOn>
    </PropertyGroup>

    <PropertyGroup>
        <TargetsForTfmSpecificContentInPackage>$(TargetsForTfmSpecificContentInPackage);GetPublishProjectReferenceTfmSpecificContent</TargetsForTfmSpecificContentInPackage>
    </PropertyGroup>

    <Target Name="GetPublishProjectReferenceTfmSpecificContent" DependsOnTargets="GetPublishProjectReferenceItems" Condition=" '$(DesignTimeBuild)' != 'true' and '@(_PublishProjectReferenceItems)' != '' ">
        <ItemGroup>
            <TfmSpecificPackageFile Include="@(_PublishProjectReferenceItems)" Condition=" '%(_PublishProjectReferenceItems.ProjectTargetPath)' != '' ">
                <PackagePath>$([System.IO.Path]::GetDirectoryName('contentFiles\any\$(TargetFramework)\%(_PublishProjectReferenceItems.ProjectTargetPath)%(_PublishProjectReferenceItems.TargetPath)'))</PackagePath>
                <PackagePath Condition=" '%(_PublishProjectReferenceItems.ProjectPackagePath)' != '' ">$([System.IO.Path]::GetDirectoryName('contentFiles\any\$(TargetFramework)\%(_PublishProjectReferenceItems.ProjectPackagePath)%(_PublishProjectReferenceItems.TargetPath)'))</PackagePath>
                <PackageCopyToOutput>true</PackageCopyToOutput>
            </TfmSpecificPackageFile>
        </ItemGroup>
    </Target>

    <Target Name="GetPublishProjectReferencePackageItems" DependsOnTargets="GetPublishProjectReferenceItems" Condition=" '$(DesignTimeBuild)' != 'true' And '@(_PublishProjectReferenceItems)' != '' ">
        <ItemGroup>
            <_PackageFiles Include="@(_PublishProjectReferenceItems->Distinct()->'%(Identity)')" Condition=" '%(_PublishProjectReferenceItems.ProjectPackagePath)' != '' And '$([System.IO.Path]::GetExtension(%(_PublishProjectReferenceItems.Identity)))' != '' ">
                <PackagePath>%(_PublishProjectReferenceItems.ProjectPackagePath)%(_PublishProjectReferenceItems.TargetPath)</PackagePath>
            </_PackageFiles>
        </ItemGroup>
    </Target>

    <PropertyGroup>
        <GetPublishProjectReferenceItemsBeforePackageFilesDependsOn>
            AssignPublishProjectConfiguration;
            GetPublishProjectReferences;
            GetPublishProjectReferenceItems;
            GetPublishProjectReferencePackageItems;
            $(GetPublishProjectReferenceItemsBeforePackageFilesDependsOn);
        </GetPublishProjectReferenceItemsBeforePackageFilesDependsOn>
    </PropertyGroup>

    <Target Name="GetPublishProjectReferencePackageItemsBeforeGetPackageFiles" DependsOnTargets="$(GetPublishProjectReferenceItemsBeforePackageFilesDependsOn)" BeforeTargets="_GetPackageFiles" Condition=" '$(DesignTimeBuild)' != 'true' ">

    </Target>

    <!--
    
        IncludeProjectReference
        
        These references have their build output included into the content output of the consuming project.
        
    -->

    <Target Name="AssignIncludeProjectConfiguration" Condition=" '$(DesignTimeBuild)' != 'true' And '@(IncludeProjectReference)' != '' ">
        <PropertyGroup>
            <OnlyReferenceAndBuildProjectsEnabledInSolutionConfiguration Condition="'$(OnlyReferenceAndBuildProjectsEnabledInSolutionConfiguration)' == ''">true</OnlyReferenceAndBuildProjectsEnabledInSolutionConfiguration>
            <ShouldUnsetParentConfigurationAndPlatform Condition="'$(ShouldUnsetParentConfigurationAndPlatform)' == '' and ('$(BuildingInsideVisualStudio)' == 'true' or '$(BuildingSolutionFile)' == 'true')">true</ShouldUnsetParentConfigurationAndPlatform>
            <ShouldUnsetParentConfigurationAndPlatform Condition="'$(ShouldUnsetParentConfigurationAndPlatform)' == ''">false</ShouldUnsetParentConfigurationAndPlatform>
        </PropertyGroup>
        <AssignProjectConfiguration ProjectReferences="@(IncludeProjectReference)" CurrentProject="$(MSBuildProjectFullPath)" CurrentProjectConfiguration="$(Configuration)" CurrentProjectPlatform="$(Platform)" DefaultToVcxPlatformMapping="$(DefaultToVcxPlatformMapping)" VcxToDefaultPlatformMapping="$(VcxToDefaultPlatformMapping)" OutputType="$(OutputType)" ResolveConfigurationPlatformUsingMappings="false" SolutionConfigurationContents="$(CurrentSolutionConfigurationContents)" AddSyntheticProjectReferencesForSolutionDependencies="false" OnlyReferenceAndBuildProjectsEnabledInSolutionConfiguration="$(OnlyReferenceAndBuildProjectsEnabledInSolutionConfiguration)" ShouldUnsetParentConfigurationAndPlatform="$(ShouldUnsetParentConfigurationAndPlatform)">
            <Output TaskParameter="AssignedProjects" ItemName="_IncludeProjectReferenceWithConfiguration"/>
            <Output TaskParameter="UnassignedProjects" ItemName="_IncludeProjectReferenceWithConfiguration"/>
        </AssignProjectConfiguration>
    </Target>

    <Target Name="GetIncludeProjectReferences" DependsOnTargets="AssignIncludeProjectConfiguration" Condition=" '$(DesignTimeBuild)' != 'true' And '@(_IncludeProjectReferenceWithConfiguration)' != '' ">
        <ItemGroup>
            <_IncludeProjectReference Include="@(_IncludeProjectReferenceWithConfiguration)">
                <ProjectName>$([System.IO.Path]::GetFileNameWithoutExtension('%(Identity)'))</ProjectName>
                <IncludeTargetPath Condition=" '%(_IncludeProjectReferenceWithConfiguration.IncludeTargetPath)' != '' ">$([MSBuild]::NormalizePath('%(_IncludeProjectReferenceWithConfiguration.IncludeTargetPath)'))</IncludeTargetPath>
                <IncludePackagePath Condition=" '%(_IncludeProjectReferenceWithConfiguration.IncludePackagePath)' != '' ">$([MSBuild]::NormalizeDirectory('%(_IncludeProjectReferenceWithConfiguration.IncludePackagePath)'))</IncludePackagePath>
            </_IncludeProjectReference>
        </ItemGroup>
    </Target>

    <Target Name="GetIncludeProjectReferenceItems" DependsOnTargets="GetIncludeProjectReferences" Condition=" '$(DesignTimeBuild)' != 'true' And '@(_IncludeProjectReference)' != '' ">
        <MSBuild Projects="@(_IncludeProjectReference)" Targets="Build;BuiltProjectOutputGroup" BuildInParallel="$(BuildInParallel)" Properties="%(_IncludeProjectReference.SetConfiguration);%(_IncludeProjectReference.SetPlatform);%(_IncludeProjectReference.SetTargetFramework);%(_IncludeProjectReference.IncludeProperties)" RemoveProperties="$(GlobalPropertiesToRemove);%(_IncludeProjectReference.GlobalPropertiesToRemove)" RebaseOutputs="true">
            <Output TaskParameter="TargetOutputs" ItemName="_IncludeProjectReferenceItems" />
        </MSBuild>
    </Target>

    <Target Name="GetIncludeProjectReferenceCopyToOutputDirectoryItems" DependsOnTargets="GetIncludeProjectReferenceItems" Condition=" '$(DesignTimeBuild)' != 'true' ">
        <ItemGroup>
            <ContentWithTargetPath Include="@(_IncludeProjectReferenceItems)" Condition=" '%(_IncludeProjectReferenceItems.IncludeTargetPath)' != '' And '%(_IncludeProjectReferenceItems.TargetPath)' != '' ">
                <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
                <TargetPath>%(_IncludeProjectReferenceItems.IncludeTargetPath)%(_IncludeProjectReferenceItems.TargetPath)</TargetPath>
                <Pack Condition=" '%(_IncludeProjectReferenceItems.IncludePackagePath)' != '' ">true</Pack>
                <PackagePath Condition=" '%(_IncludeProjectReferenceItems.IncludePackagePath)' != '' ">%(_IncludeProjectReferenceItems.IncludePackagePath)%(_IncludeProjectReferenceItems.TargetPath)</PackagePath>
            </ContentWithTargetPath>
        </ItemGroup>
    </Target>

    <PropertyGroup>
        <GetCopyToOutputDirectoryItemsDependsOn>
            AssignIncludeProjectConfiguration;
            GetIncludeProjectReferences;
            GetIncludeProjectReferenceItems;
            GetIncludeProjectReferenceCopyToOutputDirectoryItems;
            $(GetCopyToOutputDirectoryItemsDependsOn);
        </GetCopyToOutputDirectoryItemsDependsOn>
    </PropertyGroup>

    <Target Name="GetIncludeProjectReferencePackageItems" DependsOnTargets="GetIncludeProjectReferenceItems" Condition=" '$(DesignTimeBuild)' != 'true' And '@(_IncludeProjectReferenceItems)' != '' ">
        <ItemGroup>
            <_IncludePackageFiles Include="@(_IncludeProjectReferenceItems->Distinct()->'%(Identity)')" Condition=" '%(_IncludeProjectReferenceItems.IncludePackagePath)' != '' And '$([System.IO.Path]::GetExtension(%(_IncludeProjectReferenceItems.Identity)))' != '' ">
                <PackagePath>%(_IncludeProjectReferenceItems.IncludePackagePath)%(_IncludeProjectReferenceItems.TargetPath)</PackagePath>
            </_IncludePackageFiles>
            <_IncludePackageFilesToStage Include="@(_IncludeProjectReferenceItems->Distinct()->'%(Identity)')" Condition=" '%(_IncludeProjectReferenceItems.IncludePackagePath)' != '' And '$([System.IO.Path]::GetExtension(%(_IncludeProjectReferenceItems.Identity)))' == '' ">
                <PackagePath>%(_IncludeProjectReferenceItems.IncludePackagePath)%(_IncludeProjectReferenceItems.TargetPath)</PackagePath>
                <TemporaryPath>$([System.IO.Path]::GetFullPath('$(IntermediateOutputPath)include-pkg\%(_IncludeProjectReferenceItems.IncludePackagePath)%(_IncludeProjectReferenceItems.TargetPath)'))</TemporaryPath>
            </_IncludePackageFilesToStage>
        </ItemGroup>
        <Copy SourceFiles="@(_IncludePackageFilesToStage)" DestinationFiles="@(_PackageFilesToStage->'%(TemporaryPath)')" OverwriteReadOnlyFiles="true" SkipUnchangedFiles="true" />
        <ItemGroup>
            <_PackageFiles Include="@(_IncludePackageFilesToStage->'%(TemporaryPath)')">
                <PackagePath>$([System.IO.Path]::GetDirectoryName('%(_PackageFilesToStage.PackagePath)'))</PackagePath>
            </_PackageFiles>
        </ItemGroup>
    </Target>

    <PropertyGroup>
        <GetIncludeProjectReferenceItemsBeforePackageFilesDependsOn>
            AssignIncludeProjectConfiguration;
            GetIncludeProjectReferences;
            GetIncludeProjectReferenceItems;
            GetIncludeProjectReferencePackageItems;
            $(GetIncludeProjectReferenceItemsBeforePackageFilesDependsOn);
        </GetIncludeProjectReferenceItemsBeforePackageFilesDependsOn>
    </PropertyGroup>

    <Target Name="GetIncludeProjectReferencePackageItemsBeforeGetPackageFiles" DependsOnTargets="$(GetIncludeProjectReferenceItemsBeforePackageFilesDependsOn)" BeforeTargets="_GetPackageFiles" Condition=" '$(DesignTimeBuild)' != 'true' ">

    </Target>

    <!--
    
        PackageProjectReference
        
        These references have ther produced NuGet file (Pack target) copied into the consuming project as a content file.
        
    -->

    <Target Name="GetPackageOutputPath" DependsOnTargets="_GetAbsoluteOutputPathsForPack" Returns="$(PackageOutputAbsolutePath)">

    </Target>

    <Target Name="AssignPackageProjectConfiguration" Condition=" '$(DesignTimeBuild)' != 'true' And '@(PackageProjectReference)' != '' " >
        <PropertyGroup>
            <OnlyReferenceAndBuildProjectsEnabledInSolutionConfiguration Condition="'$(OnlyReferenceAndBuildProjectsEnabledInSolutionConfiguration)' == ''">true</OnlyReferenceAndBuildProjectsEnabledInSolutionConfiguration>
            <ShouldUnsetParentConfigurationAndPlatform Condition="'$(ShouldUnsetParentConfigurationAndPlatform)' == '' and ('$(BuildingInsideVisualStudio)' == 'true' or '$(BuildingSolutionFile)' == 'true')">true</ShouldUnsetParentConfigurationAndPlatform>
            <ShouldUnsetParentConfigurationAndPlatform Condition="'$(ShouldUnsetParentConfigurationAndPlatform)' == ''">false</ShouldUnsetParentConfigurationAndPlatform>
        </PropertyGroup>
        <AssignProjectConfiguration ProjectReferences="@(PackageProjectReference)" CurrentProject="$(MSBuildProjectFullPath)" CurrentProjectConfiguration="$(Configuration)" CurrentProjectPlatform="$(Platform)" DefaultToVcxPlatformMapping="$(DefaultToVcxPlatformMapping)" VcxToDefaultPlatformMapping="$(VcxToDefaultPlatformMapping)" OutputType="$(OutputType)" ResolveConfigurationPlatformUsingMappings="false" SolutionConfigurationContents="$(CurrentSolutionConfigurationContents)" AddSyntheticProjectReferencesForSolutionDependencies="false" OnlyReferenceAndBuildProjectsEnabledInSolutionConfiguration="$(OnlyReferenceAndBuildProjectsEnabledInSolutionConfiguration)" ShouldUnsetParentConfigurationAndPlatform="$(ShouldUnsetParentConfigurationAndPlatform)">
            <Output TaskParameter="AssignedProjects" ItemName="_PackageProjectReferenceWithConfiguration" />
            <Output TaskParameter="UnassignedProjects" ItemName="_PackageProjectReferenceWithConfiguration" />
        </AssignProjectConfiguration>
    </Target>

    <Target Name="GetPackageProjectReferences" DependsOnTargets="AssignPackageProjectConfiguration" Condition=" '$(DesignTimeBuild)' != 'true' And '@(_PackageProjectReferenceWithConfiguration)' != '' ">
        <ItemGroup>
            <__PackageProjectReference Include="@(_PackageProjectReferenceWithConfiguration)">
                <ProjectName>$([System.IO.Path]::GetFileNameWithoutExtension('%(Identity)'))</ProjectName>
                <PackageTargetPath Condition=" '%(_PackageProjectReferenceWithConfiguration.PackageTargetPath)' != '' ">$([MSBuild]::NormalizePath('%(_PackageProjectReferenceWithConfiguration.PackageTargetPath)'))</PackageTargetPath>
                <PackagePackagePath Condition=" '%(_PackageProjectReferenceWithConfiguration.PackagePackagePath)' != '' ">$([MSBuild]::NormalizeDirectory('%(_PackageProjectReferenceWithConfiguration.PackagePackagePath)'))</PackagePackagePath>
            </__PackageProjectReference>
        </ItemGroup>
        <AddIndexMetadata Items="@(__PackageProjectReference)" MetadataName="_Index">
            <Output TaskParameter="Items" ItemName="_PackageProjectReference" />
        </AddIndexMetadata>
    </Target>

    <Target Name="GetPackageProjectReferenceItems" DependsOnTargets="GetPackageProjectReferences" Inputs="@(_PackageProjectReference)" Outputs="%(_PackageProjectReference.Identity)\%(_PackageProjectReference._Index)\null" Condition=" '$(DesignTimeBuild)' != 'true' And '@(_PackageProjectReference)' != '' ">
        <MSBuild Projects="%(_PackageProjectReference.Identity)" Targets="_CleanPackageFiles;Pack;GetPackageOutputPath" BuildInParallel="$(BuildInParallel)" Properties="%(_PackageProjectReference.SetConfiguration);ProjectName=;PackageTargetPath=;PackagePackagePath=" RemoveProperties="$(GlobalPropertiesToRemove);%(_PackageProjectReference.GlobalPropertiesToRemove);TargetFramework;RuntimeIdentifier;ProjectName;PackageTargetPath;PackagePublishPath" RebaseOutputs="true">
            <Output TaskParameter="TargetOutputs" ItemName="_ResolvedPackageOutputPath" />
        </MSBuild>
        <PropertyGroup>
            <_ProjectName>%(_PackageProjectReference.ProjectName)</_ProjectName>
            <_PackageTargetPath>%(_PackageProjectReference.PackageTargetPath)</_PackageTargetPath>
            <_PackagePackagePath>%(_PackageProjectReference.PackagePackagePath)</_PackagePackagePath>
        </PropertyGroup>
        <ItemGroup>
            <_PackageProjectReferenceItemsInput Include="%(_ResolvedPackageOutputPath.Identity)\*.nupkg" Condition=" '%(_ResolvedPackageOutputPath.Identity)' != '' " />
            <_PackageProjectReferenceItems Include="@(_PackageProjectReferenceItemsInput)">
                <ProjectName>$(_ProjectName)</ProjectName>
                <PackageTargetPath>$(_PackageTargetPath)</PackageTargetPath>
                <PackagePackagePath>$(_PackagePackagePath)</PackagePackagePath>
                <TargetPath>%(RecursiveDir)%(Filename)%(Extension)</TargetPath>
            </_PackageProjectReferenceItems>
        </ItemGroup>
    </Target>

    <Target Name="GetPackageProjectReferenceCopyToOutputDirectoryItems" BeforeTargets="Build;AssignTargetPaths" DependsOnTargets="GetPackageProjectReferenceItems" Condition=" '$(DesignTimeBuild)' != 'true' and '@(_PackageProjectReferenceItems)' != '' ">
        <ItemGroup>
            <ContentWithTargetPath Include="@(_PackageProjectReferenceItems)" Condition=" '%(_PackageProjectReferenceItems.PackageTargetPath)' != '' ">
                <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
                <TargetPath>%(_PackageProjectReferenceItems.PackageTargetPath)%(_PackageProjectReferenceItems.TargetPath)</TargetPath>
            </ContentWithTargetPath>
        </ItemGroup>
    </Target>

    <PropertyGroup>
        <GetCopyToOutputDirectoryItemsDependsOn>
            AssignPackageProjectConfiguration;
            GetPackageProjectReferences;
            GetPackageProjectReferenceItems;
            GetPackageProjectReferenceCopyToOutputDirectoryItems;
            $(GetCopyToOutputDirectoryItemsDependsOn);
        </GetCopyToOutputDirectoryItemsDependsOn>
    </PropertyGroup>

    <PropertyGroup>
        <TargetsForTfmSpecificContentInPackage>$(TargetsForTfmSpecificContentInPackage);GetPackageProjectReferenceTfmSpecificContent</TargetsForTfmSpecificContentInPackage>
    </PropertyGroup>

    <Target Name="GetPackageProjectReferenceTfmSpecificContent" DependsOnTargets="GetPackageProjectReferenceItems" Condition=" '$(DesignTimeBuild)' != 'true' and '@(_PackageProjectReferenceItems)' != '' ">
        <ItemGroup>
            <TfmSpecificPackageFile Include="@(_PackageProjectReferenceItems)" Condition=" '%(_PackageProjectReferenceItems.PackageTargetPath)' != '' ">
                <PackagePath>$([System.IO.Path]::GetDirectoryName('contentFiles\any\$(TargetFramework)\%(_PackageProjectReferenceItems.PackageTargetPath)%(_PackageProjectReferenceItems.TargetPath)'))</PackagePath>
                <PackagePath Condition=" '%(_PackageProjectReferenceItems.PackagePackagePath)' != '' ">$([System.IO.Path]::GetDirectoryName('contentFiles\any\$(TargetFramework)\%(_PackageProjectReferenceItems.PackagePackagePath)%(_PackageProjectReferenceItems.TargetPath)'))</PackagePath>
                <PackageCopyToOutput>true</PackageCopyToOutput>
            </TfmSpecificPackageFile>
        </ItemGroup>
    </Target>

    <Target Name="GetPackageProjectReferencePackageItems" DependsOnTargets="GetPackageProjectReferenceItems" Condition=" '$(DesignTimeBuild)' != 'true' And '@(_PackageProjectReferenceItems)' != '' ">
        <ItemGroup>
            <_PackageFiles Include="@(_PackageProjectReferenceItems->Distinct()->'%(Identity)')" Condition=" '%(_PackageProjectReferenceItems.PackagePackagePath)' != '' And '$([System.IO.Path]::GetExtension(%(_PackageProjectReferenceItems.Identity)))' != '' ">
                <PackagePath>%(_PackageProjectReferenceItems.PackagePackagePath)%(_PackageProjectReferenceItems.TargetPath)</PackagePath>
            </_PackageFiles>
        </ItemGroup>
    </Target>

    <PropertyGroup>
        <GetPackageProjectReferenceItemsBeforePackageFilesDependsOn>
            AssignPackageProjectConfiguration;
            GetPackageProjectReferences;
            GetPackageProjectReferenceItems;
            GetPackageProjectReferencePackageItems;
            $(GetPackageProjectReferenceItemsBeforePackageFilesDependsOn);
        </GetPackageProjectReferenceItemsBeforePackageFilesDependsOn>
    </PropertyGroup>

</Project>
